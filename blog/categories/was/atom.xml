<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: was | 小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/blog/categories/was/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2016-04-18T22:40:01+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Websphere共享库加载顺序问题]]></title>
    <link href="http://mccxj.github.com/blog/20151011_websphere-sharelib-loading.html"/>
    <updated>2015-10-11T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/websphere-sharelib-loading</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>昨天收到有个童鞋发来的一个问题咨询，如下图所示。</p>

<p><img src="/assets/images/2015/was-sharelib1.png" alt="问题截图" /></p>

<p>提到几个疑问:</p>

<ol>
<li>配置如图所示,然后共享库和项目自身lib下都有一个“xxxx-common.jar”，如果项目用到jar包里面的一个类，将会是共享库的还是自身lib的呢？发现是用的lib里边的。</li>
<li>现网情况也是xxlib和lib下都有那jar包，但是根据日志来看，是用共享库的。</li>
</ol>


<h2>我的疑惑</h2>

<p>现网的配置如何，暂时没查明。不过就开发环境的配置来看，我一直认为Parent First应该会走共享库的，目前的现象和我掌握的知识不匹配。</p>

<p>于是，我上网搜索了一下Websphere关于共享库的资料，主要的链接如下：</p>

<ul>
<li>http://www.ibm.com/developerworks/cn/websphere/library/techarticles/haoaili/0512/</li>
<li>http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_nativelib.html?lang=zh</li>
<li>https://10.132.10.69:9043/ibm/help/index.jsp?topic=/com.ibm.ws.console.environment/ucws_rsharedlib_inst.html</li>
</ul>


<p>通过这些链接资料的描述(不得不说，这些中文翻译很隐晦)，但的确是可以解释目前的情况的。</p>

<h2>关于Websphere共享库的理解</h2>

<p>首先，Websphere的共享库和tomcat的共享库差别很大，而我却一直以为是差不多的。<br/>
tomcat的共享库是一个独立的类加载器，并且在多个Web应用中共享。好处是明显的，共享加载的类，优化内存使用。</p>

<p>其次，Webshpere的共享库非常灵(fu)活(za)，有多种配置组合可以影响结果。具体如下:</p>

<h4>共享库是可以选择和服务器关联或者和应用关联的</h4>

<ul>
<li>和服务器关联，参考http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_server.html?lang=zh</li>
<li>和应用关联，参考http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_app.html?lang=zh</li>
</ul>


<h4>共享库是可以选择是否使用隔离的类装入器(就是独立的类加载器)</h4>

<p>设置参考下图所示:</p>

<p><img src="/assets/images/2015/was-sharelib2.png" alt="请对此共享库使用隔离的类装入器" /></p>

<h4>和共享库相关的类加载策略如下:</h4>

<ul>
<li>如果选择和服务器关联，那么将忽略"请对此共享库使用隔离的类装入器"的选项，此时共享库路径将会添加到应用程序服务器(application server)类装入器加载路径上。</li>
<li>如果选择和应用关联，并且没有设置"请对此共享库使用隔离的类装入器",那么共享库路径将会添加到应用的类加载器加载路径上。此时共享库只有优化管理类库的作用，并不能减少重复加载类造成的内存占用。</li>
<li>如果选择和应用关联，并且设置"请对此共享库使用隔离的类装入器",那么共享库将作为独立的类加载器，并且各个应用之间共享这个共享库。此时共享库和tomcat的共享库类似，可以减少重复加载类造成的内存占用。</li>
</ul>


<p>对于第三种情况，它的类加载顺序如下：</p>

<p>如果应用的类载入顺序选择“父类装入器装入的类最先”,即Parent First，那么顺序如下:</p>

<ul>
<li>检查相关联的库类装入器是否可以装入类。(共享库)</li>
<li>检查它的父代类装入器是否可以装入类。(应用服务器及更高)</li>
<li>检查应用程序或 WAR 模块类装入器是否可以装入类。(应用)</li>
</ul>


<p>如果应用的类载入顺序选择“本地类装入器装入的类最先”,即Parent Last，那么顺序如下:</p>

<ul>
<li>检查应用程序或 WAR 模块类装入器是否可以装入类。(应用)</li>
<li>检查相关联的库类装入器是否可以装入类。(共享库)</li>
<li>检查它的父代类装入器是否可以装入类。(应用服务器及更高)</li>
</ul>


<h2>现象解释</h2>

<ul>
<li>开发环境中，共享库和应用关联，并且没有设置"请对此共享库使用隔离的类装入器"，所以共享库路径将会添加到应用的类加载器加载路径上，相当于在一个类加载路径上存在同样的类，所以使用到lib中的是可能的。</li>
<li>生产环境中配置尚未查明，如果共享库和应用关联，并且设置"请对此共享库使用隔离的类装入器"，按同样的载入顺序设置，即Parent First，那么是会加载到共享库的。</li>
<li>如果同样是没有设置"请对此共享库使用隔离的类装入器"，那么情况如开发环境情况，使用到共享库中的也是可能的。</li>
<li>对于同一个类加载路径上存在同样的类，具体会加载哪个是不确定的，所以上述情况都是合理的。所以应该把应用中重复的jar包移除。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[was中奇怪的生僻字乱码案例]]></title>
    <link href="http://mccxj.github.com/blog/20150808_ibm-jdk-char-encoding-diff.html"/>
    <updated>2015-08-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/ibm-jdk-char-encoding-diff</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>这个今天早上提供的一个生产问题。大体是说，改资料的时候，有个客户的名字有生僻字，叫"刘",保存之后就乱码了，变成"刘?"</p>

<h2>分析过程</h2>

<p>乱码需要确认数据传输过程中编码方式。</p>

<ol>
<li>数据是通过jQuery的ajax过来的，并且没有提前处理数据(只有组装了一个js对象)，所以是采用encodeURIComponent进行处理的，对于中文可以很粗糙的理解成UTF-8编码过。这一点通过抓包工具是可以确认的。</li>
<li>到了服务端之后会通过getParameter获取参数，由于带charsetEncoding的过滤器，并且是采用UTF-8的，那么这里拿到的字符串应该也是不会乱码的。</li>
</ol>


<p>到了这里，代码并没有特别之处。按我的理解，只要字符集能够支持这个生僻字，就不会出现乱码。<br/>
难道保存到数据库的时候乱码了? 目前数据库是用GBK的，我去查了一下GBK的字符表，的确是有这么个字的。</p>

<p>我在本机上测了一下这个字的各种功能编码转换，都是正常的。<br/>
难道又是IBM的坑? 后来我又在服务器上测试了各种情况的输出，发现有另外一个字"䶮",除了字体大小有点不一样之外，几乎一模一样的。</p>

<p>下面整理了一个简单的测试程序，来说明这个奇怪的问题。</p>

<h2>测试结果</h2>

<p>首先要说明的是，这里有2个字,一小一大,还有它们对应的unicode和utf-8编码。<br/>
测试结果是采用secureCRT的GB18030编码显示。</p>

<p><code>text
有两个字:       小        大
unicode        \uE863    \u4dae
浏览器(utf-8)   %EE%A1%A3  %E4%B6%AE
</code></p>

<p>下面的测试代码，为了编译时不关心字符集，所以换成utf-8字节来生成字符串。
```java
public class Test {</p>

<pre><code>public static void main(String[] args) throws java.io.UnsupportedEncodingException {
    new Test().test();
}

public void test() throws java.io.UnsupportedEncodingException {
    byte[] bbs = {-18,-95,-93,-28,-74,-82};
    String x = new String(bbs, "utf-8");
    String utf8 = new String(x.getBytes("utf-8"), "iso-8859-1");
    //byte[] bs = utf8.getBytes("iso-8859-1");  //test case 1
    //byte[] bs = x.getBytes("GBK");  //test case 2
    for(byte b : bs){
        System.out.println(b);
    }
    System.out.println(x);
}
</code></pre>

<p>}
```</p>

<p>对于Test Case 1, 测试一下字符串是不是本来就乱了。测试结果显示，2个字都正常，要输出成GB18030才是可以的(secureCRT设置GB18030编码)。
```text</p>

<blockquote><p>/tools/jdk1.6.0_20/bin/java -Dfile.encoding=GBK Test
-18
-95
-93
-28
-74
-82
䶮?
/opt/IBM/WebSphere/AppServer/java/bin/java -Dfile.encoding=GBK Test
-18
-95
-93
-28
-74
-82
?䶮
```</p></blockquote>

<p>```text</p>

<blockquote><p>/opt/IBM/WebSphere/AppServer/java/bin/java -Dfile.encoding=GB18030 Test
-18
-95
-93
-28
-74
-82
䶮
/tools/jdk1.6.0_20/bin/java -Dfile.encoding=GB18030 Test
-18
-95
-93
-28
-74
-82
䶮
```</p></blockquote>

<p>对于Test Case 2，主要测试一下转换成GBK字节的情况,因为这是保存到数据库的必要转换。<br/>
测试结果显示，ibm的jdk下，第一个字会编程乱码(对应的是63)。
```text</p>

<blockquote><p>/tools/jdk1.6.0_20/bin/java -Ddefault.client.encoding=GBK -Dfile.encoding=GBK Test
-2
-97
63
?
/opt/IBM/WebSphere/AppServer/java/bin/java -Ddefault.client.encoding=GBK -Dfile.encoding=GBK Test
63
-2
-97
?
```</p></blockquote>

<h2>现象总结</h2>

<ol>
<li>在GBK字符表中，第一个字是存在的，第二个字不存在。在GB18030中两个都存在。从显示上，也证明了GBK和GB18030并不完全兼容。</li>
<li>IBM的jdk为找不到第一个字，但能找到第二个字。oracle的jdk刚好相反。</li>
<li>尝试使用百度拼音输入的时候，是可以找到2个字的。如下图的第2和第6个字。</li>
<li>客户需要的是小的字(第一个)，但使用IBM的jdk转换GBK是找不到这个字的，一定会乱码。</li>
<li>假设从前台输入的是第二个字，IBM的jdk应该是可以正常转换并得到的"正确"的字(正确的小字)，从而保证数据库不乱码。</li>
</ol>


<p><img src="/assets/images/2015/yan.png" alt="yan" /></p>

<p>规避方法，选择输入第二个字(大字，截图中的第二个字，应该看不出有什么区别)。话说回来，感觉这是ibm的jdk的bug，字符对应错了。</p>

<h2>相关资料</h2>

<ul>
<li><a href="https://github.com/willonboy/ChineseToPinYin">各种字符集编码表</a></li>
<li><a href="http://ff.163.com/newflyff/gbk-list/">GBK编码表</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
