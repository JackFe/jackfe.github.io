<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2015-01-15T22:00:26+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java字符编码问题]]></title>
    <link href="http://mccxj.github.com/blog/20150114_java-charset-problem.html"/>
    <updated>2015-01-14T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/java-charset-problem</id>
    <content type="html"><![CDATA[<p>1.假设文件用UTF-8保存了中文&#8221;操作计算机&#8221;，然后使用GBK编码进行读取?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/myfile&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，后续转成UTF-8仍然有部分乱码，如果保存的内容是&#8221;操作计算&#8221;就不会乱码。为什么?</p>

<p>2.继续上述问题，如果使用ISO-8859-1进行读取?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/myfile&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，可以发现无论是&#8221;操作计算机&#8221;还是&#8221;操作计算&#8221;、&#8221;操 作计算&#8221;，都不会乱码。为什么?</p>

<p>3.如果文件采用GBK编码保存中文，但是使用UTF-8读取，就会发现怎么转都是乱码? 为什么?</p>

<p>4.假设代码如下，为什么前面3行都是输出乱码?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.请思考，下面的同样掺和了ISO-8859-1，为什么却能正常?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.假设使用http发送xml，那么xml报文采用何种编码发送和xml的编码头部指定的编码有什么关系?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;GBK&quot;</span> <span class="o">?&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用net.sf.json库进行json反序列化时存在的问题]]></title>
    <link href="http://mccxj.github.com/blog/20150108_net-sf-json-problem.html"/>
    <updated>2015-01-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/net-sf-json-problem</id>
    <content type="html"><![CDATA[<h3>问题描述</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;{\&quot;response_head\&quot;:{\&quot;menuid\&quot;:\&quot;xxx\&quot;,\&quot;process_code\&quot;:\&quot;xxx\&quot;,\&quot;verify_code\&quot;:\&quot;\&quot;,\&quot;resp_time\&quot;:\&quot;20150107103234\&quot;,\&quot;sequence\&quot;:{\&quot;resp_seq\&quot;:\&quot;20150107103301\&quot;,\&quot;operation_seq\&quot;:\&quot;\&quot;},\&quot;retinfo\&quot;:{\&quot;retcode\&quot;:\&quot;120\&quot;,\&quot;rettype\&quot;:\&quot;0\&quot;,\&quot;retmsg\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}},\&quot;response_body\&quot;:{} }&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">JSONObject</span> <span class="n">object</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">fromObject</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{&quot;response_head&quot;:{&quot;menuid&quot;:&quot;xxx&quot;,&quot;process_code&quot;:&quot;xxx&quot;,&quot;verify_code&quot;:&quot;&quot;,&quot;resp_time&quot;:&quot;20150107103234&quot;,&quot;sequence&quot;:{&quot;resp_seq&quot;:&quot;20150107103301&quot;,&quot;operation_seq&quot;:&quot;&quot;},&quot;retinfo&quot;:{&quot;retcode&quot;:&quot;120&quot;,&quot;rettype&quot;:&quot;0&quot;,&quot;retmsg&quot;:[&quot;182096|&quot;]}},&quot;response_body&quot;:{}}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题分析</h3>

<p>采用json-lib-2.4-jdk15.jar，测试代码如上，会发现retmsg的值变成&#8221;[182096|&#8221;.</p>

<p>测试简化json字符串，最终效果如下：</p>

<p>解析失败的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:{\&quot;retmsg\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续简化的话，就会解析成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>找了一下源码，发现json-lib在某些情况下(绕来绕去，断点发现的)会尝试解析字符串，看看是不是json对象。（尼玛，太智能了）</p>

<p>AbstractJSON.java中的260行,这个时候str是后面的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">mayBeJSON</span><span class="o">(</span> <span class="n">str</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">JSONSerializer</span><span class="o">.</span><span class="na">toJSON</span><span class="o">(</span> <span class="n">str</span><span class="o">,</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span> <span class="n">JSONException</span> <span class="n">jsone</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JsonArray.java中的1130行，这个时候v已经是&#8221;182096|&#8221;。这个时候会判断v是不是一个json对象，如果搞一个数组回去，否则就是搞一个字符串(上述现象)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>           <span class="n">tokener</span><span class="o">.</span><span class="na">back</span><span class="o">();</span>
</span><span class='line'>           <span class="n">Object</span> <span class="n">v</span> <span class="o">=</span> <span class="n">tokener</span><span class="o">.</span><span class="na">nextValue</span><span class="o">(</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>           <span class="k">if</span><span class="o">(</span> <span class="o">!</span><span class="n">JSONUtils</span><span class="o">.</span><span class="na">isFunctionHeader</span><span class="o">(</span> <span class="n">v</span> <span class="o">)</span> <span class="o">){</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span> <span class="n">v</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">mayBeJSON</span><span class="o">(</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">v</span> <span class="o">)</span> <span class="o">){</span>
</span><span class='line'>                 <span class="n">jsonArray</span><span class="o">.</span><span class="na">addValue</span><span class="o">(</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">DOUBLE_QUOTE</span> <span class="o">+</span> <span class="n">v</span> <span class="o">+</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">DOUBLE_QUOTE</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>              <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>                 <span class="n">jsonArray</span><span class="o">.</span><span class="na">addValue</span><span class="o">(</span> <span class="n">v</span><span class="o">,</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">fireElementAddedEvent</span><span class="o">(</span> <span class="n">index</span><span class="o">,</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">index</span><span class="o">++</span> <span class="o">),</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如，下面的情况会产生一个数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:{\&quot;retmsg\&quot;:\&quot;[{1820: 96|}]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;response_head&quot;</span><span class="p">:{</span><span class="nt">&quot;retmsg&quot;</span><span class="p">:[{</span><span class="nt">&quot;1820&quot;</span><span class="p">:</span><span class="s2">&quot;96|&quot;</span><span class="p">}]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于如何判断是否是json,是会判断以[开头，以]结束的，刚好中枪。而尝试去截取中间内容的时候，又碰巧遇到中间的]字符，所以生成的字符串就是被截断了一部分的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">    * Tests if the String possibly represents a valid JSON String.&lt;br&gt;</span>
</span><span class='line'><span class="cm">    * Valid JSON strings are:</span>
</span><span class='line'><span class="cm">    * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;&quot;null&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;starts with &quot;[&quot; and ends with &quot;]&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;starts with &quot;{&quot; and ends with &quot;}&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">mayBeJSON</span><span class="o">(</span> <span class="n">String</span> <span class="n">string</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="s">&quot;null&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">string</span> <span class="o">)</span>
</span><span class='line'>                  <span class="o">||</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span> <span class="s">&quot;[&quot;</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span> <span class="s">&quot;]&quot;</span> <span class="o">))</span> <span class="o">||</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span> <span class="s">&quot;{&quot;</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span> <span class="s">&quot;}&quot;</span> <span class="o">)));</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题结论</h3>

<ul>
<li>当json对象中某个值是以&#8221;{&#8220;开头，&#8221;}&#8221;结束，或者&#8221;[&#8220;开头,&#8221;]&#8221;结束的时候，解析结果可能不是期望的。</li>
<li>不幸的是，目前来看，这个问题是无解的，考虑使用其他json库吧。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编码与乱码问题]]></title>
    <link href="http://mccxj.github.com/blog/20150107_charset-intro.html"/>
    <updated>2015-01-07T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/charset-intro</id>
    <content type="html"><![CDATA[<h2>关于java的编码</h2>

<ul>
<li>java的源代码编码格式和最终的运行是没什么关系的。你可以使用GBK或UTF-8来编程。</li>
<li>java编译后的class文件都是使用UTF-16来存储和运行的。</li>
<li>在eclipse中是根据文件设置字符编码来编译的，所以可以对不同文件使用有不同的编码，但这个不推荐。</li>
<li>使用javac编译可以通过-encoding指定字符编码,如果不指定，会使用系统默认编码，这个跟平台有关。所以使用ant需要指定编码。</li>
</ul>


<p>下面这种在ant中常见的警告，就是表示编译用的编码和编程的编码不一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CCustGroupPrompt</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span> <span class="err">警告：编码</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span> <span class="err">的不可映射字符</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多java相关的，见<a href="20150114_java-charset-problem.html">java字符编码问题</a></p>

<h2>关于jsp的编码</h2>

<ul>
<li>jsp内容字符编码是pageEncoding指定的，用于指导jsp的编译器进行编译成java/class文件。如果没设置会采用contentType。</li>
<li>contentType是用于response的输出http报文时的编码，浏览器根据ContentType来采用何种字符编码显示。和使用response.setCharacterEncoding()是一个道理的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;%</span><span class="err">@</span> <span class="n">page</span> <span class="n">contentType</span><span class="o">=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果page设置的内容，和页面中的meta设置不一样，那又怎样?</p>

<ul>
<li>meta是用来设置当前网页后续处理的默认编码，和当前页面的响应无关。</li>
<li>只要page设置和jsp文件内容实际字符编码一致，就不会乱。</li>
</ul>


<p>如果不设置page，那又怎样?</p>

<ul>
<li>如果没有指定page的话， contentType默认是text/html，浏览器会根据meta指定的编码来解析报文。这个时候，如果jsp内容实际编码和meta指定的编码一样，就能够显示正常。</li>
<li>编译后的java文件内容，其实都是不能显示中文的。经测试，发现是用的ISO-8859-1读取的文件,并转换成UTF-8的java文件。</li>
<li>如果使用UTF-16来编写jsp，但是不指定page，编译后的java和class反编译都是能够显示中文的。并且在tomcat下(其他未测试)，即使meta设置的编码不一样，也能够显示中文，因为这个时候contentType变成text/html;charset=UTF-16BE，具体大家可以查看编译后的java文件。感觉在编译的时候能够优先识别到UTF-16一样。</li>
</ul>


<p>上述情况只是在tomcat上测试过，并不代表其他在中间件也是同样的情况，实际应用中应该确保jsp内容的字符编码、page设置、meta设置保持一致，避免一些灵异事件。</p>

<h2>关于URL的编码</h2>

<p>这里指直接通过URL传递中文，或者手工拼接中文到URL的情况，究竟使用何种编码传递没有规定，看浏览器心情，不具可移植性。
对于IE来说，虽然高级选项上有个发送UTF-8 URL，但不一定会勾上。如果真的要使用，应该自行编码后传递。</p>

<h2>普通表单提交</h2>

<p>使用GET或者POST，对于编码来说，没有区别。
都会对中文进行编码，编码采用页面的字符编码。</p>

<p>例如&#8221;中文&#8221;的UTF-8编码是E4B8ADE69687，传递的内容就是%E4%B8%AD%E6%96%87。</p>

<p>页面编码是通过<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">指定的。
而html5页面可以通过<meta charset="utf-8">这种简化形式指定。</p>

<h2>表单文件上传</h2>

<p>需要使用POST，并在form中增加属性enctype=&#8221;multipart/form-data&#8221;。
不会对文件名、输入框内容进行字符编码。
采用页面的字符编码，对内容原样传输。</p>

<p>区别可能不是很好理解，下面举例：
例如&#8221;中文&#8221;的UTF-8编码是E4B8ADE69687，传递的内容是字节E4B8ADE69687，或许在某些工具上可以直接看到“中文”.(像fiddler用utf-8来显示的)</p>

<h2>Java/Servlet/Struts2(commons-upload)对参数的处理</h2>

<p>Java/Servlet对参数的处理
* 默认只能获取到普通表单的参数提交。
* 编码格式通过request.setCharacterEncoding(&#8220;UTF-8&#8221;)指定，这个已经有过滤器可以实现的了。
* 使用Struts2的话，对multipart/form-data的提交也是能够获取通过getParameter取到参数的。</p>

<p>注意的是，有些实现(如tomcat)，对参数的解析是延后处理的，设置了编码之后，获取一个参数(这个时候参数全部都解析了)，再设置编码是没有效果。ServletRequest的setCharacterEncoding描述也是这么说的。</p>

<p>标准的commons-upload，文件名的获取、输入框内容的获取使用的编码可能不一样。
* 文件名的获取，就是FileItem.getName(),解析编码需要通过ServletFileUpload#setHeaderEncoding这个方法设置，如果没有设置，采用平台编码(可以通过-Dfile.encoding=UTF-8来指定，否则win通常是ANSI(GBK),unix看locale)
* 输入框内容，就是FileItem.getString(),可以指定解析编码，如果不指定采用ISO-8859-1。</p>

<p>Struts2默认使用commons-upload进行文件上传的处理。
* 对于文件名的获取没有通过setHeaderEncoding设置，所以这个通常会依赖于平台编码(需要确保平台编码和页面编码一致)
* 对于输入框内容的获取，指定了编码格式为request.getCharacterEncoding()，否则采用默认的ISO-8859-1。所以这个需要提前设置一下CharacterEncoding，否则也可能会乱码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见DES实现陷阱]]></title>
    <link href="http://mccxj.github.com/blog/20141229_des-hack.html"/>
    <updated>2014-12-29T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/des-hack</id>
    <content type="html"><![CDATA[<h3>DES要点说明</h3>

<ul>
<li>DES走的是分组加密，每次处理对象的是8位byte，所以对字符串加解密的时候，会涉及字符编码格式和补齐8位的问题。</li>
<li>DES的密钥是固定8位的byte的，其中前7位是加解密用的，最后一位是校验码。</li>
<li>3DES的增强型的DES，带3个key，如果3个key一样，就是DES，也有一种变种是1、3是一样的。但都是固定8位的。</li>
<li>3DES通常是EDE,就是先加密(k1)再解密(k2)再加密(k3)</li>
</ul>


<p>目前，项目代码中有3个和DES实现相关的类,下面看看他们有哪些问题：</p>

<h3>案例1</h3>

<ul>
<li>从字符串到byte的转换，有指定编码格式GBK，这个是可以接受的。</li>
<li>使用的是DESede,就是3DES的EDE加密方式，但是3个key是一样的，没有意义。</li>
<li>加密时代码先自行进行了补齐操作(补\0),但是补齐是在字符串上操作的，不是在字节上操作，导致实际上可能没有对齐(中文情况)。</li>
<li>调用加密API时，没有指定补齐方式，会采用默认补齐，造成重复补齐(当然也修复了上面的补齐操作)。</li>
<li>解密指定NoPadding，和加密Padding方式不一样，造成解密结果最后会出现很多多余的字节。所以结果必须得trim一下才行。</li>
</ul>


<p>参考代码如下：</p>

<p>补齐实现有误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">strIn</span> <span class="o">=</span> <span class="n">in</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">strIn</span> <span class="o">||</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">strIn</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">strIn</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strIn</span> <span class="o">+=</span> <span class="s">&quot;\0&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strIn</span> <span class="o">+=</span> <span class="s">&quot;\0&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">strIn</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">CHARSET</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">enbytes</span> <span class="o">=</span> <span class="n">encryptCipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">byteArrToHexStr</span><span class="o">(</span><span class="n">enbytes</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key是一样的，补齐方式没对应上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">DESedeEncrypt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>            <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span>
</span><span class='line'>            <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SecretKeySpec</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecretKeySpec</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="s">&quot;DESede&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">encryptCipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KEY_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">encryptCipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">decryptCipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;DESede/ECB/NoPadding&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">decryptCipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>案例2</h3>

<ul>
<li>从字符串到byte的转换，采用了系统默认编码，存在平台移植性问题。</li>
<li>密钥key的长度布置8位，有多余字符(虽然只取前8位避免出错)，造成混乱。</li>
</ul>


<p>key的格式不标准，有多余字符:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">strDefaultKey</span> <span class="o">=</span> <span class="s">&quot;mywebsite123456%&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Key</span> <span class="nf">getKey</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">arrBTmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">arrB</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrBTmp</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrB</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">arrB</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arrBTmp</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">spec</span><span class="o">.</span><span class="na">SecretKeySpec</span><span class="o">(</span><span class="n">arrB</span><span class="o">,</span> <span class="s">&quot;DES&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>案例3</h3>

<ul>
<li>从字符串到byte的转换，采用了系统默认编码，存在平台移植性问题。</li>
<li>实现不是标准的DES，或3DES，是在DES基础上定义了一套加密。</li>
<li>根据目前key的长度，比标准3DES都要慢很多，另外没有采用JDK带的API。</li>
</ul>


<p>key的长度不标准：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesUtil</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstKey</span> <span class="o">=</span> <span class="s">&quot;com.xxx.xxxpro&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">secondKey</span> <span class="o">=</span> <span class="s">&quot;xxx_web&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">thirdKey</span> <span class="o">=</span> <span class="s">&quot;xxxservice&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现方式是对每个key补齐8位，再切割形成每组多个8位的key，再采用EEE的方式进行处理:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">firstLength</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">firstKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">secondLength</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">secondKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">z</span> <span class="o">&lt;</span> <span class="n">thirdLength</span><span class="o">;</span> <span class="n">z</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">thirdKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">z</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java常见工具库培训]]></title>
    <link href="http://mccxj.github.com/blog/20141225_java-common-util.html"/>
    <updated>2014-12-25T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/java-common-util</id>
    <content type="html"><![CDATA[<p>目前项目中常见的工具库有apache commons,google guava,再算上spring的话，需要自己从头开始写工具类的情况大大减少。
为了给广大童鞋普及一下工具库用法，减少无用功(还可能因为实现的不好留后遗症的)，这里简单的介绍一下相关工具类。<strong>google guava大家应该比较陌生，这里先不介绍，:)</strong></p>

<h2>apache commons</h2>

<p>官方地址： http://commons.apache.org/</p>

<p>apache commons历史悠久，涉及范围也是最广的，在官网上分了数十个模块，但有些模块是新开发的，就不要贸然使用啦。</p>

<p>这里只是介绍最最常用的commons库，排名不分先后，如下：</p>

<h3>commons-codec</h3>

<p>包括常见的编码、解码算法，例如MD5,Base64，举例如下:</p>

<ul>
<li>Base64#encode 加密成base64串</li>
<li>Base64#decode 解密base64串</li>
<li>DigestUtils.md5Hex 进行MD5加密，注意得到的是小写的MD5(MD5标准不区分大小写),在比较的时候需要注意</li>
<li>DigestUtils.shaHex 进行SHA1加密 SHA256,512之类也是支持的，可以自行查阅</li>
</ul>


<h3>commons-collections</h3>

<p>包括一堆增强的集合类（我了解不多，大家可以自行学习），各种和集合类相关的工具类，举例如下：</p>

<ul>
<li>CollectionUtils.isEmpty 是否null或空集合，这一类的方法很多，看看有个大概印象</li>
<li>MapUtils.isEmpty 是否null或空Map</li>
<li>ListUtils.removeAll 从某个列表中删除存在于另外个列表的元素</li>
</ul>


<p>同类型的还有SetUtils、IteratorUtils等，大体上是集合相关的操作，如过滤、是否相等、交集、差集、转换(变同步、变不可变)等，其实这个用到的机会也不是很大。</p>

<h3>commons-net</h3>

<p>实现了一些常见的网络协议，可能关系最大的要数ftp、smtp的实现了。而jdk带的sun.net.ftp，这个尽量就少用拉。</p>

<p>这套api的实现用法得google一下了，看<a href="http://commons.apache.org/proper/commons-net/">官方文档的例子</a>,
又或者别人的经验代码，例如这个http://my.oschina.net/hly3825/blog/33657</p>

<h3>commons-httpclient</h3>

<p>http客户端实现，貌似已经从commons独立出去了。3.x版本和4.x版本变化比较大，大家要使用的时候自行查阅资料。
尽量避免使用HttpURLConnection去直接搞。</p>

<h3>commons-io</h3>

<p>io方面的工具类，主要包括文件处理、流处理,常见的类有IOUtils、FileUtils、FilenameUtils。举例如下：</p>

<ul>
<li>IOUtils.closeQuietly 安静关闭输出输出流，常用于finally关闭流的时候</li>
<li>IOUtils.copy 把某个输入流拷贝到某个输出流中去</li>
<li>IOUtils.toString 把某个输入流、URI的内容转换成字符串</li>
<li>IOUtils.readLines 按行读取流</li>
<li>Charset.UTF_8 有一些常见的、系统都会支持的字符集，已经定义成常量</li>
<li>FileUtils.readLines 按行读取文件</li>
<li>FileUtils.readFileToString 读取文件保存在一个字符串中</li>
</ul>


<p>IOUtils针对的是stream，FileUtils针对的是File对象，相应的有文件拷贝、删除等操作。<br/>
注意的是，<strong>使用字符流格式的时候，务必指定编码</strong></p>

<h3>commons-lang</h3>

<p>这个是使用最多的库了，有lang2.x和3.x版本，尽量使用3.x版本。</p>

<p>常见的有StringUtils、SystemUtils、RandomStringUtils、DateFormatUtils、DateUtils、各种Builder、Validate，举例如下：</p>

<ul>
<li>StringUitls.isEmpty 判空，和isBlank的区别在于它不进行trim</li>
<li>StringUtils.join 按分隔符合并，这个很常用</li>
<li>StringUtils.repeat 重复某个字符或字符串，有些需要格式化的是会用到</li>
<li>StringUtils.startsWith  和endsWith那样，是增强版本，还有endsWithAny、endsWithIgnoreCase等</li>
<li>SystemUtils 主要是一些常见系统环境变量，如临时目录、用户目录、分隔符等</li>
<li>RandomStringUtils 用来生成各种随即字符串，例如全字母、全数字或混合型的</li>
<li>DateFormatUtils、DateUtils 一个是字符串变日期，一个是日期相关的操作</li>
<li>各种Builder 主要用实现常见的toString、compareTo、equals、hashcode等常见类，例如ReflectionToStringBuilder就很方便实现toString方法。同理，CompareToBuilder、EqualsBuilder、HashCodeBuilder都很好理解。</li>
<li>Validate 实现一些assert，例如Validate.notNull可以用来做前置校验，和spring的Assert类是类似的。</li>
</ul>


<h3>其他commons库</h3>

<ul>
<li>commons-fileupload 仅限于在文件上传的类中使用，虽然它也有一些工具类，但是就不要在其他地方使用啦。</li>
<li>commons-dbcp 一个数据库连接池，现在就比较少用了</li>
<li>commons-pool 一个java对象池实现，通常用来缓存一些耗时较大的对象，dbcp也是基于它的，一般也少直接用。</li>
<li>commons-logging 日志包装实现，在开源项目中使用广泛，项目中一般直接用log4j等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用org.json库进行xml和json转换存在的问题]]></title>
    <link href="http://mccxj.github.com/blog/20141126_org-json-and-xml.html"/>
    <updated>2014-11-26T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/org-json-and-xml</id>
    <content type="html"><![CDATA[<p>org.json库中提供一个xml和json进行转换的工具类，XML.java</p>

<p>使用方式如下：
* xmlstr = XML.toString(jsonstr)
* jsonstr = XML.toJSONObject(xmlstr).toString()</p>

<p>中间层原有代码使用这种方式进行格式转换，不过存在一些问题：
* json转换为xml的时候，对带content字段的节点，是直接生成文本，而不是<content>xx</content>
* xml转换为json的时候，会对指为整形(还有true/false/null等)的字符串尝试进行转换，变成原生类型</p>

<p>为了避免这两个问题，对org.json库的XML.java进行了一些修改:
* 去掉content字段的特殊处理
* 去掉整形字符串尝试转换的逻辑</p>

<p>见https://github.com/mccxj/JSON-java</p>

<p>经验教训: 以后引用第三方库的时候，要小心呀，避免触碰到一些特殊开关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[json格式须知]]></title>
    <link href="http://mccxj.github.com/blog/20140815_json-intro.html"/>
    <updated>2014-08-15T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/json-intro</id>
    <content type="html"><![CDATA[<p>着重介绍与项目使用相关的json知识。如果没有特别说明，环境是指Javascript下的json。</p>

<h3>区分类型</h3>

<ul>
<li>首先需要区分json字符串和json对象，不过通常根据上下文可以区分。</li>
<li>协议关注的是json字符串，而代码中处理的是json对象，两者通过序列化(JSON.stringify)和反序列化相互转换(JSON.parse)。</li>
</ul>


<h3>常见格式</h3>

<ul>
<li>主要有数组和key/value形式的object</li>
<li>数组是有顺序的，可以不同类型，常用于顺序遍历操作。</li>
<li>object是无顺序的，key只能是字符串，常用于快速随机查找。</li>
<li>null是可以被序列化的，而undefined不可以(会消失)。</li>
<li>其他的一些特殊值，如Nan，Infinity，会被序列化为null。</li>
</ul>


<h3>关于数组</h3>

<ul>
<li>对于数组对象，虽然支持key/value的操作，但是序列化的时候设置的值会丢失。</li>
<li>数组序列化的长度是根据length属性来的，没有赋值的位置是null。</li>
<li>对数组遍历不应该采用for in语句，因为通过key/value设置的值也会被输出。</li>
</ul>


<h3>关于Object</h3>

<ul>
<li>规范上规定key是带双引号的字符串()，但实际上很多反序列化工具能够支持数值、单引号字符串、字符串字面量(没有引号的字符串)。</li>
<li>如果是一普通浮点数值，可以通过相应的数值作为key获取，或者通过对应的字符串来获取。如用2.2的话，可以用2.2或&#8221;2.2&#8221;。</li>
<li>如果是一整型数值，可以用数值，但用字符串只能用整型的，如用2.0的话，可以用2.0或2或&#8221;2&#8221;,但&#8221;2.0&#8221;就不可以。</li>
<li>如果使用字符串字面量的话，需要避免一些关键字使用。如delete</li>
<li>key不应该重复，如果重复的话，通常结果是后面的会覆盖前面的。</li>
<li>可以用.后面加key来取值，或者用[]这样的操作符来获取，第一种方式更推荐，但只能支持非数字开头的字符串，unicode也是可以。</li>
<li>对object遍历可以采用for in语句。</li>
</ul>


<h3>协议转换</h3>

<ul>
<li>协议传输的是json字符串，但通常里边的类型都是字符串，不区分数值，因此做数值运算需要先转换。</li>
<li>和xml一样，需要注意特殊字符如引号、回车、unicode等，尽量避免手动拼接，采用序列化工具。</li>
<li>object类型的json序列化/序列化的时候，都不应该预期他是有顺序的，虽然很多库都有带默认顺序，应该使用数组。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xml格式须知]]></title>
    <link href="http://mccxj.github.com/blog/20140814_xml-intro.html"/>
    <updated>2014-08-14T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/xml-intro</id>
    <content type="html"><![CDATA[<p>着重介绍与项目使用相关的xml知识</p>

<h3>常见节点</h3>

<ul>
<li>虽然xml节点是可以带属性的，但是我们项目中使用的通常没有带属性。</li>
<li>常见节点有带子节点的节点(非内容节点)、带文本的节点。</li>
<li>协议中表示可选的节点，通常是指文本为空的节点，如<name></name>，而不能不带。</li>
</ul>


<h3>节点的顺序</h3>

<ul>
<li>非列表节点，通常是不需要限定顺序的，但不排除有一些SB系统处理不了，所以最好按协议顺序来。</li>
<li>带列表节点，最好保证子节点按业务要求的顺序排列，即使有标示顺序的子节点。</li>
</ul>


<h3>命名空间</h3>

<ul>
<li>通常是有命名空间的话，所有节点都会带，不带通常是不对的。</li>
<li>命名空间是通过xmlns:n0=&#8221;http://www.gmcc.net/ngcrm/&#8221; 来进行别名的，理论上应该认URI而不是别名，但实际使用却常用别名来识别。</li>
<li>解析时可以考虑忽略命名空间处理，例如xpath，可以用doc.selectNodes(&#8220;//*[local-name()=&#8217;Service&#8217;]&#8221;)找到Service节点。</li>
</ul>


<h3>编码格式</h3>

<ul>
<li>xml是一种自编码文本，是由第一行决定整个xml的编码格式。</li>
<li>上面只是规范，但像http一样，总有系统不是这么玩的，需要双方协商和确认。</li>
<li>有的xml就是没有第一行的编码描述，更是应该协商确认。</li>
</ul>


<h3>合法的值</h3>

<ul>
<li>除了内置xml文本作为文本节点，或者明显可能特殊字符的文本(如密码，各种属性用某符号拼接)，大多数情况不需要关注。</li>
<li>和html一样，某些特殊字符是需要转移的，见下面的转义列表。</li>
<li>如果不想转义，需要用&lt;![CDATA[]]&gt;括起来，需要注意的是，里边的内容需要保持不转义。</li>
<li>&lt;![CDATA[]]&gt;里边的内容是原封不动获取的，即使内容带了回车、空格，如果需要对内容二次处理的话，需要注意某些留空可能导致无法处理。</li>
<li>&lt;![CDATA[]]&gt;不能嵌套两次，只能用转义来规避。</li>
</ul>


<p>常见的特殊字符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>lt <span class="ni">&amp;lt;</span> <span class="err">&lt;</span>（小于号）
</span><span class='line'>gt <span class="ni">&amp;gt;</span> &gt;（大于号）
</span><span class='line'>amp <span class="err">&amp;</span>  <span class="err">&amp;</span>（“and”符）
</span><span class='line'>apos &#39; &#39;（撇号或单引号）
</span><span class='line'>quot &quot; &quot;（双引号）
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014读书笔记]]></title>
    <link href="http://mccxj.github.com/blog/20140410_books-to-be-read.html"/>
    <updated>2014-04-10T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/books-to-be-read</id>
    <content type="html"><![CDATA[<h3>ruby元编程</h3>

<ul>
<li>作者Paolo Perrotta</li>
<li>阅读于2014-04-22,大约5天</li>
<li>适合有一定ryby/rails开发经验的同学,对认识ruby魔法很有帮助</li>
</ul>


<p>最近看这本书，主要是跟别人谈起这本书，一时兴起又阅读一下，主要是复习复习。毕竟自己搞ruby/rails有好几个年头了，虽然现在主要以java为主，但是ruby还是我工作以外的首选。说回这本书，是系统介绍ruby魔法的魔法书，如果想了解一下那些神奇的库是怎么实现的，又或者想用ruby构建自己的DSL，这本书可以给你足够的知识点。放马去吧！</p>

<h3>CSS实战手册</h3>

<ul>
<li>作者David Sawyer McFarland</li>
<li>阅读于2014-04-18,大约7天</li>
<li>适合想系统学习点CSS的童鞋，书籍出版了有些年头，不过的确经典，强力推荐</li>
</ul>


<p>最近在弄个网站，苦恼bootstrap水太深，想调整难度大，所以看看书找找感觉。
这个The Missing Manual系列还是比较出名的，特别是这本CSS实战手册，难度也不是大，但讲解得很系统化。
其实，这本书还出了新版，专注CSS3了。可惜的是，现在只有英文版，不是很适合我这种CSS初哥，不过下一阶段打算看看。
那么多概念，还是浮云呀，终究还是看基础扎不扎实。</p>

<h3>Go语言编程</h3>

<ul>
<li>作者许式伟、吕桂华(七牛云存储团队)</li>
<li>阅读于2014-04-09,大约3天</li>
<li>适合对Go语言刚兴趣、想一窥究竟的童鞋,内容一般、比较浅显,不是很适应英文的童鞋可以优先考虑</li>
</ul>


<p>看这本书主要是冲着七牛云存储团队的名气去的，毕竟他们是国内第一个吃螃蟹的，据说90%以上的代码都是GO实现的。
另外，我最近用Go在做点东西，看从中看到对Go实践方式的解读。阅读之后，感觉内容偏浅，不如看官方文档。
不过里边有些例子还不错，适合有其他语言经验的童鞋阅读，可以通过对比其他语言的代码实现，加深印象。
总结一下，这书适合快速浏览，剩下的还是老老实实编程吧。</p>

<h3>代码的未来</h3>

<ul>
<li>作者松本行弘(Ruby之父)</li>
<li>阅读于2014-04-06,大约3天</li>
<li>适合轻松阅读、扩展知识面,不深入,可以读读</li>
</ul>


<p>这本书和作者另外一本书&#8221;松本行弘的程式世界&#8221;感觉有些类似，都是以发表在某专栏的文章集合为主。
可能是由于篇幅问题，大多都是泛泛而谈，点到即止。阅读起来没有什么压力，如果有需要深入的话，就得自己去找资料了。
总体来说，我对这类书还是挺感兴趣的，可以挑选一些自己感兴趣的话题进行阅读，有助于开阔视野。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[websphere+spring+jndi数据源配置]]></title>
    <link href="http://mccxj.github.com/blog/20140329_was-datasource.html"/>
    <updated>2014-03-29T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/was-datasource</id>
    <content type="html"><![CDATA[<p>配置的步骤在下面简要说明:</p>

<ol>
<li>增加基于spring的jndi数据源配置</li>
<li>在websphere上增加数据源配置</li>
<li>链接iiop地址</li>
</ol>


<p>下面进行详细描述。</p>

<ul>
<li>基于spring的jndi配置文件</li>
</ul>


<p>注意:如果是第二种方式，可以忽略第三部分&#8221;链接iiop地址&#8221;</p>

<p>第一种方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
</span><span class='line'>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
</span><span class='line'> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
</span><span class='line'> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
</span><span class='line'> xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
</span><span class='line'> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd&quot;&gt;
</span><span class='line'>
</span><span class='line'><span class="gi">+    &lt;bean id=&quot;GlobalConfig&quot;</span>
</span><span class='line'><span class="gi">+        class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;systemPropertiesMode&quot;&gt;</span>
</span><span class='line'><span class="gi">+            &lt;value&gt;1&lt;/value&gt;</span>
</span><span class='line'><span class="gi">+        &lt;/property&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;searchSystemEnvironment&quot;&gt;</span>
</span><span class='line'><span class="gi">+            &lt;value&gt;true&lt;/value&gt;</span>
</span><span class='line'><span class="gi">+        &lt;/property&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot;&gt;</span>
</span><span class='line'><span class="gi">+            &lt;value&gt;true&lt;/value&gt;</span>
</span><span class='line'><span class="gi">+        &lt;/property&gt;</span>
</span><span class='line'><span class="gi">+    &lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+     &lt;bean id=&quot;jtaTransactionManager&quot; class=&quot;org.springframework.transaction.jta.WebSphereUowTransactionManager&quot; /&gt;</span>
</span><span class='line'>   &lt;tx:annotation-driven transaction-manager=&quot;jtaTransactionManager&quot;  proxy-target-class=&quot;true&quot; /&gt;
</span><span class='line'>   &lt;bean id=&quot;lobHandler&quot; class=&quot;org.springframework.jdbc.support.lob.DefaultLobHandler&quot;/&gt;
</span><span class='line'>
</span><span class='line'><span class="gi">+    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;jndiName&quot;&gt;&lt;value&gt;XXX&lt;/value&gt;&lt;/property&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;resourceRef&quot;&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;</span>
</span><span class='line'><span class="gi">+        &lt;property name=&quot;jndiEnvironment&quot;&gt;&lt;props&gt;&lt;prop key=&quot;java.naming.provider.url&quot;&gt;${java_naming_provider_url}&lt;/prop&gt;&lt;/props&gt;&lt;/property&gt;</span>
</span><span class='line'><span class="gi">+    &lt;/bean&gt;  </span>
</span><span class='line'>&lt;/beans&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在websphere上增加数据源配置</li>
</ul>


<p><img src="http://mccxj.github.com/assets/images/2014/ds.png" alt="效果图" /></p>

<ul>
<li>链接iiop地址</li>
</ul>


<p>在server的java进程定义里边配置jvm参数:  -Djava_naming_provider_url=iiop://localhost:port/,另外，修改启动参数需要重启server才能生效。</p>

<p><img src="http://mccxj.github.com/assets/images/2014/iiop.png" alt="效果图" /></p>

<p>其中每个server的port都是不一样的，具体的端口通过Application servers - serverX - Communications -  Ports上查看，如下图:</p>

<p><img src="http://mccxj.github.com/assets/images/2014/port.png" alt="效果图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jdk7编译的bug记录]]></title>
    <link href="http://mccxj.github.com/blog/20140225_android-jdk7-bug.html"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/android-jdk7-bug</id>
    <content type="html"><![CDATA[<h2>过程</h2>

<p>昨天在编译某个android项目的时候，发现dex打包出错。
后来检查发现编译生成的SplashScreenActivity$1.class格式出错。</p>

<p>后来经常测试，发现jdk6正常，jdk7不正常，包括最新的u51版本。</p>

<h2>bug分析</h2>

<p>相关的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkUpdate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">UpgradeInfo</span><span class="o">.</span><span class="na">isApkLocalExist</span><span class="o">(</span><span class="n">SplashScreenActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">UpgradeInfo</span><span class="o">.</span><span class="na">getFilePath</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">updateInstall</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">AUTO_UPDATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">initDialog</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mUpgradeInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UpgradeInfo</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mGetVersionConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GetVersionConfig</span><span class="o">(</span><span class="n">SplashScreenActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">CheckUpgradeHandler</span><span class="o">(),</span> <span class="n">mUpgradeInfo</span><span class="o">,</span> <span class="n">getUpgradeRequestParam</span><span class="o">());</span>
</span><span class='line'>        <span class="n">mGetVersionConfig</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// /没版本且不升级</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Handler</span><span class="o">().</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Intent</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">SplashScreenActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">startActivity</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="n">LOADING_TIME</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正常情况下，Runnable匿名类会生成一个class，但是这里的AUTO_UPDATE被定义为static final，并且设置为true。
在这种情况下，jdk会优化掉后面的分支，但是jdk6不会生成class，但是jdk7会生成一个格式有误的class，反编译后如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">SplashScreenActivity</span><span class="n">$1</span>
</span><span class='line'>  <span class="kd">implements</span> <span class="n">Runnable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，在进行dex打包的时候，就会检测到不规范的class，进行报错。
我想，如果在web应用上的话，应该是不会有问题的，因为这个类没有机会被使用。</p>

<p>后来，我发现在其他項目中也有类似写法，但是编译不会有问题。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">UpgradeInfo</span><span class="o">.</span><span class="na">isApkLocalExist</span><span class="o">(</span><span class="n">LogoActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">UpgradeInfo</span><span class="o">.</span><span class="na">getFilePath</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// /检测到有新版本可以安装</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">dialog_check_version</span><span class="o">);</span>
</span><span class='line'>    <span class="n">DialogUtil</span><span class="o">.</span><span class="na">dialogForTwoButton</span><span class="o">(...</span> <span class="o">,</span> <span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialog</span><span class="o">,</span> <span class="kt">int</span> <span class="n">which</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//..</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">AUTO_UPDATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ....</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">///没版本且不升级</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Handler</span><span class="o">().</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Intent</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">LogoActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">OperatorLoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">startActivity</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">LOADING_TIME</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>故猜测，这个bug只出现在第一个不被使用匿名类身上(因为这个类前面还有个OnClickListener的匿名类)。
经过测试，发现也的确是存在这样的情况。</p>

<h2>规避方式</h2>

<p>乖乖使用jdk6，不要使用jdk7。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android+maven问题记录]]></title>
    <link href="http://mccxj.github.com/blog/20140219_android-maven-problems.html"/>
    <updated>2014-02-19T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/android-maven-problems</id>
    <content type="html"><![CDATA[<h2>参考材料</h2>

<ul>
<li>https://code.google.com/p/maven-android-plugin/wiki/GettingStarted</li>
<li>http://books.sonatype.com/mvnref-book/reference/android-dev.html</li>
<li>http://www.ikoding.com/build-android-project-with-maven/</li>
<li>https://github.com/mosabua/maven-android-sdk-deployer</li>
<li>http://rgladwell.github.io/m2e-android/</li>
<li>http://wiki.eclipse.org/M2E_plugin_execution_not_covered</li>
</ul>


<h2>前提条件</h2>

<ul>
<li>JDK 1.6+</li>
<li>Android SDK r21.1+</li>
<li>Maven 3.1.1+</li>
<li>Set environment variable ANDROID_HOME to the path of your installed Android SDK and add $ANDROID_HOME/tools as well as $ANDROID_HOME/platform-tools to your $PATH. (or on Windows %ANDROID_HOME%\tools and %ANDROID_HOME%\platform-tools)</li>
</ul>


<p>特别注意maven的版本号</p>

<h2>maven配置</h2>

<p>请设置环境变量M2_HOME，并把settings.xml放到M2_HOME/conf中去。</p>

<h2>eclipse配置</h2>

<p>对于eclipse来说，除了要maven插件，还需要<a href="http://rgladwell.github.io/m2e-android/">m2e-android</a>插件。</p>

<h2>dependency中support-v4的版本号只有很旧r7</h2>

<p>其实除了support-v4,像android也有类似的问题。有一种解决方案是采用<a href="https://github.com/mosabua/maven-android-sdk-deployer">maven-android-sdk-deployer</a>。
我测试过之后，发现这个解决方案虽然可行，但实际上比较麻烦。我直接在公司内的代理仓库上安装了新版本的。</p>

<h2>Plugin execution not covered by lifecycle configuration</h2>

<p>pom.xml很可能出现下面的错误提示:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Plugin execution not covered by lifecycle configuration:
</span><span class='line'> com.jayway.maven.plugins.android.generation2:android-maven-plugin:3.8.2:consume-aar
</span><span class='line'> <span class="o">(</span>execution: default-consume-aar, phase: compile<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然不影响编译，但是很怪，可以通过下面的配置进行排除:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;pluginManagement&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.eclipse.m2e<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>lifecycle-mapping<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;lifecycleMappingMetadata&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;pluginExecutions&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;pluginExecution&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;pluginExecutionFilter&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;groupId&gt;</span>com.jayway.maven.plugins.android.generation2<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;artifactId&gt;</span>android-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;versionRange&gt;</span>3.8.2<span class="nt">&lt;/versionRange&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                                  <span class="nt">&lt;goal&gt;</span>manifest-update<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                                  <span class="nt">&lt;goal&gt;</span>generate-sources<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                                  <span class="nt">&lt;goal&gt;</span>proguard<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                                  <span class="nt">&lt;goal&gt;</span>consume-aar<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;/pluginExecutionFilter&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;action&gt;</span>
</span><span class='line'>                              <span class="nt">&lt;ignore</span> <span class="nt">/&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;/action&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/pluginExecution&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/pluginExecutions&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/lifecycleMappingMetadata&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/pluginManagement&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以参考<a href="http://wiki.eclipse.org/M2E_plugin_execution_not_covered">M2E_plugin_execution_not_covered</a></p>

<h2>OutOfMemory或创建不了虚拟机</h2>

<p>有时候会出现内存溢出或创建不了虚拟机的错误。考虑设置内存大小</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.jayway.maven.plugins.android.generation2<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>android-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dex&gt;</span>
</span><span class='line'>          <span class="nt">&lt;jvmArguments&gt;</span>
</span><span class='line'>              <span class="nt">&lt;jvmArgument&gt;</span>-Xms256m<span class="nt">&lt;/jvmArgument&gt;</span>
</span><span class='line'>              <span class="nt">&lt;jvmArgument&gt;</span>-Xmx512m<span class="nt">&lt;/jvmArgument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/jvmArguments&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dex&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>出现maven打包太慢的情况</h2>

<p>经过测量，在dex成classes.dex的阶段比较慢，dx工具有提供一些参数进行优化.</p>

<ul>
<li>incremental 增量打包，开发阶段可以开启，可以比较明显的缩短打包时间</li>
<li>optimize 是否优化classes.dex，开发阶段可以关闭</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dex&gt;</span>
</span><span class='line'>  <span class="nt">&lt;incremental&gt;</span>true<span class="nt">&lt;/incremental&gt;</span>
</span><span class='line'>  <span class="nt">&lt;optimize&gt;</span>false<span class="nt">&lt;/optimize&gt;</span>
</span><span class='line'><span class="nt">&lt;/dex&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>libpng error: Not a PNG file</h2>

<p>如果直接把jpg格式换个名字，变成png，编译会报下面的错误，导致后面编译的.9图片也出问题(混淆问题的原因)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>INFO<span class="o">]</span> libpng error: Not a PNG file
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ERROR: Failure processing PNG image E:<span class="se">\p</span>rojects<span class="se">\G</span>3ESOP<span class="se">\E</span>SOP-Hubei2<span class="se">\r</span>es<span class="se">\d</span>rawable-xhdpi<span class="se">\m</span>ore_about_pic1.png
</span></code></pre></td></tr></table></div></figure>


<h2>&#8216;build.plugins.plugin.version&#8217; is missing</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>WARN<span class="o">]</span> <span class="s1">&#39;build.plugins.plugin.version&#39;</span> is missing fororg.apache.maven.plugins:maven.compiler.plugin
</span><span class='line'>It is highly recommended to fix these problems because they threaten the stability of your build.
</span><span class='line'>For this reason, future Maven versions might no longer support building such malformed projects.
</span></code></pre></td></tr></table></div></figure>


<p>很简单，给maven.compiler.plugin这个插件添加version属性。
其实所有引用的插件都应该指定版本，不然都会有类似的提示。</p>

<h2>关于编码</h2>

<p>对于源码的编码格式和编译版本，应该进行指定:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>      <span class="nt">&lt;encoding&gt;</span>UTF8<span class="nt">&lt;/encoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于资源处理的话，可能出现下面的提示:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>WARNING<span class="o">]</span> Using platform encoding <span class="o">(</span>GBK actually<span class="o">)</span> to copy filtered resources, i.e. build is platform dependent!
</span></code></pre></td></tr></table></div></figure>


<p>这个应该设置成UTF-8，如下所示:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>maven-resources-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;encoding&gt;</span>UTF-8<span class="nt">&lt;/encoding&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>maven-jarsigner-plugin对带特殊字符的口令的处理</h2>

<p>这个弄了好久，最后发现得把密码用引用引起来。切记切记。</p>

<p>后来，发现在linux这样又不能支持。所以只能用profile解决。</p>

<h2>部分代码在jdk7中编译后dex出错</h2>

<p>参考<a href="http://mccxj.github.com/blog/20140225_android-jdk7-bug.html">jdk7编译的bug记录</a>,暂时只用jdk6编译</p>

<h2>jdk6不支持android-19的proguard</h2>

<p>原因是android-19的API实现了一些jdk7的特性，在proguard会找不到这些api。
由于和上一个问题有些冲突，暂时不考虑proguard。后续考虑考虑上jdk7。</p>

<h2>如何添加.so支持</h2>

<p>例如下面的百度地图SDK，需要加入一个so文件，在百度SDK里边是这样调用的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;BaiduMapSDK_v2_3_1&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要用maven集成的话，可以用下面的配置(已经部署到代理仓库):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.baidu<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>libBaiduMapSDK_v2_3_1<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;classifier&gt;</span>armeabi<span class="nt">&lt;/classifier&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>so<span class="nt">&lt;/type&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何转换成eclipse项目</h2>

<p>项目目录中只有pom.xml，如果要导入eclipse的话，可以考虑使用下面的命令生成.project和.classpath文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn eclipse:eclipse
</span></code></pre></td></tr></table></div></figure>


<p>生成之后可能会有M2_REPO变量找不到的问题，可以在eclipse中通过window>Preferences>Maven>Installations>Add进行添加maven安装位置。</p>

<p>否则的话，可以按以下方法添加M2_REPO: Window > Preferences > Java > Build Path > Classpath Variables
新增一个M2_REPO变量指向你maven本地仓库。</p>

<h2>常用命令</h2>

<p>mvn clean package<br/>
打包，但不部署。</p>

<p>mvn clean install<br/>
打包，部署并运行。</p>

<p>mvn clean package android:redeploy android:run<br/>
这个命令通常用于手机上已经安装了要部署的应用，但签名不同，所以我们打包的同时使用redeploy命令将现有应用删除并重新部署，最后使用run命令运行应用。</p>

<p>mvn android:redeploy android:run<br/>
不打包，将已生成的包重新部署并运行。</p>

<p>mvn android:deploy android:run<br/>
部署并运行已生成的包，与redeploy不同的是，deploy不会删除已有部署和应用数据</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[考察对类加载的理解(答案篇)]]></title>
    <link href="http://mccxj.github.com/blog/20131228_classloader-answer.html"/>
    <updated>2013-12-28T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/classloader-answer</id>
    <content type="html"><![CDATA[<h2>独立进程篇</h2>

<p>首先需要知道类加载器是怎么回事? 在Java里边，类加载器就是用来加载类的，然后才是执行代码。<br/>
Java里边默认有启动类加载器(boot),扩展类加载器(ext),和应用类加载器(app)。<br/>
其中boot就是用来加载最开始的虚拟机和最基本的java类，ext是用来加载一些扩展类，默认是在jre/lib/ext目录下的。<br/>
最后一个才是你真正会用到的。cp参数就是用来指定应用类加载器找类的地方，java.ext.dirs就是用来指定
扩展类加载器找类的地方。
这三种类加载器是有层级关系的，类似于继承关系(父子关系)。</p>

<p>另外一个需要知道的概念是，类加载器在找类的时候，默认是采用双亲委派机制的。<br/>
例如应用类加载器加载类的时候，会先叫ext去加载，ext就会叫boot去加载，只有加载不到才尝试自己去加载。<br/>
这种做法是有个重要的因素，就是为了安全性考虑。</p>

<p>最后需要知道的是，TestServlet.class.getClassLoader()获取到的时候，加载TestServlet类所使用的实际的类加载器。</p>

<p>回到上面的问题。</p>

<p>第一个很简单，指定了应用类加载器加载的路径，所以main方法能找到，TestServlet也能找到，config.properties也能被应用类加载器找到。
启动是正常的。</p>

<p>第二个问题，TestServlet是被扩展类加载器加载的，所以通过它来找config.properties会找不到(在应用类加载器中才能被加载到)。</p>

<p>第三个问题，调整目录后，这个时候扩展类加载器的加载路径上也有config.properties，所以启动也会正常。</p>

<p>现在调整了代码，换成了Thread.currentThread().getContextClassLoader()的实现。<br/>
这个是有一点不一样的，上下文类加载器默认就是应用类加载器(如果通过代码进行修改的话)。
上下文类加载器还是一个很有用的技术，
可以用在JDBC这种SPI(Service Provider Interface)接口与实现分离的技术上，有兴趣可以去找找资料。</p>

<p>在这种情况下，后面的三个命令都是能够正常的，因为config.properties能够被正常识别的。</p>

<p>再说一点，用eclipse可以运行的程序，用命令行不一定可以，这点必须要认准最后的启动参数，通过这个来确认。
我们这边写独立进程的时候，贪方便喜欢用java.ext.dirs这个虚拟机参数，但这个有时候会有奇怪的问题。
大家要注意区分这个参数和cp参数的区别，这样就分析有思路，找问题很happy。</p>

<h2>Web应用服务器篇</h2>

<p>像tomcat这种应用服务器，本身也是一个java程序，但它可以把我们放上去的各个web应用隔离开来。
你没法调用其他web应用中的类，看上去好像是完全不相干的。这种技巧就充分利用了自定义类加载器的功能。
像tomcat会对每个应用单独定义一个类加载器(继承应用类加载器)，并且修改双亲委派机制。
而是采用先从应用中的lib目录、classes目录尝试加载，没找到才到上面去找。(像was这种就跟复杂了，加载顺序也是可选的)</p>

<p>所以通常我们会有共享库的概念，在tomcat中对应的就是tomcat_home/lib这个目录(老版本的话还有更多目录可选)。
把一些第三方库放到这里，可以减少加载类的数量，从而减少内存占用。</p>

<p>这里要说明的是，类可以被不同的类加载器加载，虽然是在同一个jvm里边，但是是被当成不同的类(唯一标识是类加载器+类名)。</p>

<p>现在回到问题。虽然一开始就有人告诉我们，servlet是属于单例运行的。但是在这里有点小变化。</p>

<p>第一个问题，这个应该最常规的做法了，appa和appb是不相干的，所以访问appb，输出的是&#8221;1 1&#8221;，因为两个类是通过不同的类加载器加载的(就是说不一样的类)，肯定生成的servlet实例是不一样的。</p>

<p>第二个问题，这种是共享库的做法，所以实际上他们使用的是同一个类，但是对于不同的app，用的是不同的servlet实例。
所以会出现静态变量有影响，当实例变量是独立的。所以最后会输出&#8221;3 1&#8221;。所以有维护静态变量的话，使用共享库是有不一样的。</p>

<p>第三个问题，这种其实在生产中也很常见，上新程序的时候就可能变成这样了。其实这个跟第一种情况是一样的。
不过，在was上加载顺序是可选的，所以情况也可能变成第二种情况。</p>

<h2>后话</h2>

<p>这里讲解的只是皮毛，有兴趣的童鞋，可以google更多资料和书籍，加以研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[考察对类加载的理解(问题篇)]]></title>
    <link href="http://mccxj.github.com/blog/20131227_classloader-test.html"/>
    <updated>2013-12-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/classloader-test</id>
    <content type="html"><![CDATA[<p>类加载和程序运行是有些关系的，不妨来测试一下。<br/>
难度:中级</p>

<h2>独立进程篇</h2>

<p>假设有下面的类文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Main.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">mccxj</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">TestServlet</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TestServlet.Java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">mccxj</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestServlet</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">TestServlet</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;config.properties&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">is</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;couId not found config.properties&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设目录结构是这样的，其中jar下面的表示是在jar包里边的内容:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>
</span><span class='line'>    -lib
</span><span class='line'>        -test.jar
</span><span class='line'>          -com/github/mccxj/test/Main.class
</span><span class='line'>    -main.jar
</span><span class='line'>        -com/github/mccxj/test/TestServlet.class
</span><span class='line'>        -config.properties
</span></code></pre></td></tr></table></div></figure>


<p>请问：</p>

<ol>
<li>执行java -cp main.jar;lib/test.jar com.github.mccxj.test.Main会出错么？</li>
<li>执行java -cp main.jar -Djava.ext.dirs=./lib com.github.mccxj.test.Main结果是怎样？</li>
</ol>


<p>继续调整目录结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>
</span><span class='line'>    -lib
</span><span class='line'>        -test.jar
</span><span class='line'>            -com/github/mccxj/test/Main.class
</span><span class='line'>        -main.jar
</span><span class='line'>            -com/github/mccxj/test/TestServlet.class
</span><span class='line'>            -config.properties
</span></code></pre></td></tr></table></div></figure>


<p>再请问</p>

<ol>
<li>执行java -Djava.ext.dirs=./lib com.github.mccxj.test.Main结果是怎样？</li>
</ol>


<p>继续调整一下TestServlet的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>// TestServlet.Java
</span><span class='line'>package com.github.mccxj.test;
</span><span class='line'>
</span><span class='line'>public class TestServlet {
</span><span class='line'>  public void test() {
</span><span class='line'><span class="gd">-    InputStream is = TestServlet.class.getClassLoader().getResourceAsStream(&quot;config.properties&quot;);</span>
</span><span class='line'><span class="gi">+    InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;config.properties&quot;);</span>
</span><span class='line'>    if(is == null){
</span><span class='line'>      throw new RuntimeException(&quot;couId not found config.properties&quot;);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>把目录结构恢复成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>
</span><span class='line'>    -lib
</span><span class='line'>        -test.jar
</span><span class='line'>          -com/github/mccxj/test/Main.class
</span><span class='line'>    -main.jar
</span><span class='line'>        -com/github/mccxj/test/TestServlet.class
</span><span class='line'>        -config.properties
</span></code></pre></td></tr></table></div></figure>


<p>请问:</p>

<ol>
<li>执行java -cp   main.jar;lib/test.jar com.github.mccxj.test.Main会出错么？</li>
<li>执行java   -cp main.jar -Djava.ext.dirs=./lib com.github.mccxj.test.Main结果又是怎样？</li>
</ol>


<p>最后调整目录结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>
</span><span class='line'>    -lib
</span><span class='line'>        -test.jar
</span><span class='line'>            -com/github/mccxj/test/Main.class
</span><span class='line'>        -main.jar
</span><span class='line'>            -com/github/mccxj/test/TestServlet.class
</span><span class='line'>            -config.properties
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>执行java -Djava.ext.dirs=./lib com.github.mccxj.test.Main结果是怎样？</li>
</ol>


<h2>Web应用服务器篇</h2>

<p>下面的例子，以tomcat为例。
假设有下面的Servlet文件，并打包成test.jar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// TestServlet.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">mccxj</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Atomiclnteger</span> <span class="n">al</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Atomiclnteger</span> <span class="n">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">arg1</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Servlet</span> <span class="n">Exception</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printIn</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">al</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printIn</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">a2</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并部署两个应用程序appa、appb,在他们的WEB_INF/web.xml添加了下面的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servlet-name&gt;</span>test<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;display-name&gt;</span>test servlet<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servlet-class&gt;</span>com.huawei.test.TestServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'><span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servlet-name&gt;</span>test<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url-pattern&gt;</span>/test<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>大家应该听说过Servlet是单例的概念，也可能听过Web应用服务器有共享类的机制。那么，请问：</p>

<ol>
<li>现在把test.jar扔到appa和appb的WEB_INF/lib目录中，启动tomcat，先访问/appa/test两次，再访问/appb/test, 此时会输出什么？</li>
<li>继续把test.jar都移除掉，只添加到TOMCAT_HOME/lib目录中，启动tomcat，先访问/appa/test两次，再访问/appb/test, 此时会输出什么？</li>
<li>最后把test.jar拷贝一份到appa的WEB_INF/lib目录中，启动tomcat，先访问/appa/test两次，再访问/appb/test, 此时会输出什么？</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对UC文章《实时监控Android设备网络包》的补充]]></title>
    <link href="http://mccxj.github.com/blog/20131227_android-tcpdump-netcat-addon.html"/>
    <updated>2013-12-27T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/android-tcpdump-netcat-addon</id>
    <content type="html"><![CDATA[<p>补充的内容，主要是一些细节的问题，备忘.</p>

<h2>编译netcat</h2>

<p>android上自己好像带了一个，不过也可以自己编译一个。 我这里使用cygwin来编译的，首先去下载源码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cygwin</span>
</span><span class='line'><span class="nb">cd</span> /cygdrive/d/
</span><span class='line'>mkdir -p netcat/toolchain
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">NDK</span><span class="o">=</span>/cygdrive/d/android-ndk-r8e
</span><span class='line'>/cygdrive/d/android-ndk-r8e/build/tools/make-standalone-toolchain.sh --platform<span class="o">=</span>android-8 --install-dir<span class="o">=</span>netcat/toolchain
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s1">&#39;pwd&#39;</span>/netcat/toolchain/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>arm-linux-androideabi-gcc
</span><span class='line'><span class="nb">export </span><span class="nv">RANLIB</span><span class="o">=</span>arm-linux-androideabi-ranlib
</span><span class='line'><span class="nb">export </span><span class="nv">AR</span><span class="o">=</span>arm-linux-and roideabi-ar
</span><span class='line'><span class="nb">export </span><span class="nv">LD</span><span class="o">=</span>arm-linux-androideabi-ld
</span><span class='line'>
</span><span class='line'><span class="c"># 开始编译源码</span>
</span><span class='line'><span class="nb">cd </span>netcat-0.7.1/
</span><span class='line'>./configure —host<span class="o">=</span>arm-linux
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'><span class="c"># 用file进行检测一下</span>
</span><span class='line'>file src/netcat
</span><span class='line'>src/netcat: ELF 32-bit LSB executable, ARM, version1 <span class="o">(</span>SYSV<span class="o">)</span>, ...
</span><span class='line'>
</span><span class='line'><span class="c"># 发到android上去</span>
</span><span class='line'>adb push src/netcat /data/local/netcat
</span><span class='line'>adb shell chmod 777 /data/local/netcat
</span></code></pre></td></tr></table></div></figure>


<h2>tcpdump的使用</h2>

<p>如果只是监听所有的包，可以用下面的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell <span class="s2">&quot;tcpdump -n -s 0 -w - | nc -I -p 11233&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果先监听端口的话，又想转发的话，写法有点特别。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell <span class="s2">&quot;tcpdump -X -n -s 0 -w - port 5000 | nc -l -p 11233&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，如果像我这样，有cygwin的话，就已经有nc命令了，可以像下面一样进行转发。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb forward tcp:11333 tcp:11233 <span class="o">&amp;&amp;</span> nc -v 127.0.0.1 | /cygdriver/d/Wireshark/Wireshark.exe -k -S -i -
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由于MANIFEST.MF不规范导致程序无法启动的问题]]></title>
    <link href="http://mccxj.github.com/blog/20131226_manifest.html"/>
    <updated>2013-12-26T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/manifest</id>
    <content type="html"><![CDATA[<p>昨晚发现某个jar程序启动不了，包类没找到。
这个是由于我增加了一个新的jar包，并且依赖于xwork.jar。
所以在build.xml里边增加这个jar包。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fatjar.build</span> <span class="na">output=</span><span class="s">&quot;ibossproc.jar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/jsse.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/cipher14.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/xwork-2.0.4.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/fatjar.build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过还是出错，出错信息挺诡异的(用星号对某些信息进行屏蔽)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mccxj</span><span class="nd">@XXX</span><span class="o">:/</span><span class="n">work</span><span class="o">/</span><span class="n">procs</span><span class="o">/</span><span class="n">log</span><span class="o">&gt;</span> <span class="n">cat</span> <span class="o">*</span>
</span><span class='line'><span class="err">线程</span> <span class="s">&quot;main&quot;</span> <span class="err">中发生异常</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NoClassDefFoundError</span><span class="o">:</span> <span class="n">com</span><span class="o">.*.*.*.*</span><span class="n">Entry</span>
</span><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassNotFoundException</span><span class="o">:</span> <span class="n">com</span><span class="o">.*.*.*.*</span><span class="n">Entry</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLClassLoader</span><span class="o">.</span><span class="na">findClass</span><span class="o">(</span><span class="n">URLClassLoader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">421</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">ClassLoader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">652</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Launcher</span><span class="n">$AppClassLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">Launcher</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">346</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ClassLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">ClassLoader</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">618</span><span class="o">)</span>
</span><span class='line'><span class="n">Could</span> <span class="n">not</span> <span class="n">find</span> <span class="n">the</span> <span class="n">main</span> <span class="nl">class:</span> <span class="n">com</span><span class="o">.*.*.*.*</span><span class="n">Entry</span><span class="o">.</span>  <span class="n">Program</span> <span class="n">will</span> <span class="n">exit</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类是程序里边的代码，应该是存在的。把jar解压了，也的确看到jar包里边有这个类。</p>

<p>于是把以前能跑的jar拿来进行对比，发现META-INF/MANIFEST.MF稍稍有点不同，新的在最后多了2个空行。
简单调整了一下打包脚本（用的一个fatjar.jar的工具）,最后两行进行调整顺序，发现就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;fatjar.build</span> <span class="na">output=</span><span class="s">&quot;xx.jar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/jsse.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/xwork-2.0.4.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fatjar.jarsource</span> <span class="na">file=</span><span class="s">&quot;${buildlib}/cipher14.jar&quot;</span> <span class="na">relpath=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/fatjar.build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一开始感觉是fatjar.jar的bug，不过回过头来看，其实是cipher14.jar这个包的问题。<br/>
因为这个包的META-INF/MANIFEST.MF的最后一样是个问号，根据<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html#JAR%20Manifest">规范文档</a>,
这个是不规范的。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Manifest</span><span class="o">-</span><span class="nl">Version:</span> <span class="mf">1.0</span>
</span><span class='line'>
</span><span class='line'><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>而fatjar会把所有的MANIFEST.MF进行合并，但是奇怪的地方就在这里了。如果问号是在最后一样，能够正常启动。 <br/>
如果问号后面还有内容，就启动不了。所以调整顺序之后，能够正常启动。<br/>
后来，我把cipher14.jar的MANIFEST.MF中的问号去掉，不需要调整顺序也是可以正常的。</p>

<p>这个包应该是第三方厂商提供的，又踩地雷了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[连接池泄露定位案例]]></title>
    <link href="http://mccxj.github.com/blog/20131126_connection-leak.html"/>
    <updated>2013-11-26T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/connection-leak</id>
    <content type="html"><![CDATA[<p>前阵子，其他项目组里边有个某项目频繁出现获取不到连接的问题，基本上每一天都出现一次。</p>

<p>打出来的javacore里面，有大量的线程等待获取连接。并且现场反映，从数据库那边监控到大量的空闲连接没有释放。</p>

<p>事实上，这个系统会用到两个数据源，其中有个是正常的。有意思的是，这几个月都没有新版本上载。</p>

<p>走读了java里边的连接获取释放逻辑，虽然获取和关闭的调用到处都是(没封装好)，但最后还是调用一些静态方法来完成的，并且都在finally块中进行了处理，感觉不会存在泄露的问题。</p>

<p>尝试看看能不能重现，运气还不错，在开发环境模拟生产的业务场景(业务功能不多，但逻辑处理流程比较长)进行了压力测试，也的确出现了这种情况。</p>

<p>既然能够重现问题，定位就方便许多了。我知道有Btrace这类神器可以帮助定位，但我没有使用过(下次再尝试一下)。我是通过修改代码来定位的，基本原理就是在获取连接时记录堆栈信息，在关闭时清除，这样出问题的时候就可以找到哪些地方有问题。其实用工具也是类似的做法。</p>

<p>大体上是这样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 用来存储堆栈信息</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Connection</span><span class="o">,</span> <span class="n">Exception</span><span class="o">&gt;</span> <span class="n">conns</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">Connection</span><span class="o">,</span> <span class="n">Exception</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当获取链接的时候</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Connection</span> <span class="nf">getConnection</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>  <span class="n">conns</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">conn</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 当释放链接的时候</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">releaseConnection</span><span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span><span class="o">){</span>
</span><span class='line'>  <span class="n">conns</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">conn</span><span class="o">);</span>
</span><span class='line'>  <span class="n">dataSource</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">conn</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改后重新压力测试后，打开记录的堆栈一看，居然是在jsp里边获取的，真是顿时无语。</p>

<p>后来，虽然听说这个问题是其他原因引起的，导致非正常情况下走到这段逻辑，但这个地雷还是以前埋进去的，也怨不了别人。</p>

<p>其实，关于资源释放的逻辑封装，可以参考spring的jdbc封装(回调的方式)，又或许用ThreadLocal、拦截器等方式在整个应用上进行处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[周日笔记本系统安装记事]]></title>
    <link href="http://mccxj.github.com/blog/20131120_notebook-system-install.html"/>
    <updated>2013-11-20T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/notebook-system-install</id>
    <content type="html"><![CDATA[<p>上周在京东商城买了一个HP的笔记本，没有带系统，本来以为装个系统不麻烦，没想到整了一天才装好。</p>

<p>事情是这样的，网上推荐使用USB安装，可是我手头上只有一个2G的USB，心想装个xp凑合使用着。我使用了老毛桃的装机工具，
发现无论是使用ghost还是原版安装，都没法成功，重启之后到了xp启动界面就蓝屏了。</p>

<p>尝试了好几次之后，并且测试chkdsk /f 后无效，我还是上网查找一下。<strong>错误码是0X0000007B</strong>，网上说这个是和硬盘有关,是设置问题或者病毒造成的硬盘引导分区错误。
如果是在用原版系统盘安装系统的时候出这个问题，那说明机器配置还是比较新的，作为老的系统盘，不认这么新的硬盘接口，所以得进BIOS把硬盘模式改成IDE兼容模式。</p>

<p>我这机器是新的，硬盘也重新格式化并分区了，应该不是什么病毒的问题。那应该是硬盘接口的问题，不过我发现BIOS里边没有硬盘的设置项目，上网搜索发现的确是没有这个设置的。</p>

<p>看来xp是没希望了，只好换win7系统，win7的iso有2G多，只能分两次拷贝到笔记本硬盘上，再安装系统。果然，这次就很顺利了，整整折腾了一天。看来，装机也是技术活呀。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈任务分解与评估]]></title>
    <link href="http://mccxj.github.com/blog/20131108_mission-estimate.html"/>
    <updated>2013-11-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/mission-estimate</id>
    <content type="html"><![CDATA[<p>平时工作，做需求的时候，总有有时间限制，俗称工作量评估，通常用x天或者x个单位点数来表示。在现实中，评估都是很随意的，实际结果经常有很大出入。
在这里不评论，这种做法有多科学。只是单个任务工作量越大，越需要细分，直到有足够的清晰度，这样才能评估得比较靠谱。这里我们用一个例子来解释一下。</p>

<p>我最近想做一个andriod上的死活题app，至少第一期的目标是这样的。我们先来做一下分解，看看需要那些工具，需要做什么工作。</p>

<p>总体来说，用android，优先考虑使用java开发。这需要java的编程经验和一些android的经验。我认为，这个不是难点，还是比较有信心的。</p>

<p>既然是围棋的死活题，需要了解死活题的存储格式，这是一种基于文本的格式，用树型分支的形式。
这个程序需要能够识别这种格式，这要求我们需要实现一个解释器，不过我考虑使用现成的词法分析器来实现，例如javacc，当然如果不懂这个，还得去学习一下。</p>

<p>另外，这是一个围棋游戏，肯定需要实现游戏规则，最重要的就是落子，吃子的判断。这个是最重要的算法部分。</p>

<p>还有就是，由于涉及棋盘显示，可能需要实现自定义控件或者绘图功能。如果不熟悉，也是要多花些时间的。</p>

<p>还有一些不那么明显的细节部分，举例如下:</p>

<p>死活题通常只用了棋盘的一小部分，手机屏幕又小，如何只是集中显示部分？<br/>
另外，在显示所有死活题列表的时候，能不能显示预览图？</p>

<p>举例子，是想说明，一些看似简单的任务，其实并没有那么简单。除了仔细分解任务，还有个常用的手法就是原型，把认为最难的部分先做一下，看看心里有没有底。</p>

<p>当然，所有的任务都跟你的熟悉程度有关，经常做一件事情就是这样(日常的工作就是这样)。但这些工作经验，在切换到非舒适区的时候，并不能减少心里的担忧。对于做技术的人来说，需要做的事，往往是要敢于打破技术舒适区。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小心jsch的sftp连接泄露]]></title>
    <link href="http://mccxj.github.com/blog/20131106_jsch-session-connect.html"/>
    <updated>2013-11-06T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/jsch-session-connect</id>
    <content type="html"><![CDATA[<p>今天早上和一个同事处理一个现网问题，从javacore里边可以看到大量的Connect Thread，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Connect</span> <span class="n">thread</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.100</span> <span class="n">session</span><span class="err">&quot;</span> <span class="n">prio</span><span class="o">=</span><span class="mi">6</span> <span class="n">tid</span><span class="o">=</span><span class="mh">0x042d3400</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1458</span> <span class="n">runnable</span> <span class="o">[</span><span class="mh">0x04e4f000</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>堆栈信息如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">jcraft</span><span class="o">.</span><span class="na">jsch</span><span class="o">.</span><span class="na">Session</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Session</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1193</span><span class="o">)</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">619</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>怀疑是资源泄露了，jsch是一个sftp的工具库。检查jsch的使用代码，可以看到代码是有进行关闭的，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JSch</span> <span class="n">jsch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSch</span><span class="o">();</span>
</span><span class='line'><span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">jsch</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="s">&quot;caixiaojian&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.1.100&quot;</span><span class="o">,</span> <span class="mi">22</span><span class="o">);</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;******&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">setConfig</span><span class="o">(</span><span class="s">&quot;StrictHostKeyChecking&quot;</span><span class="o">,</span> <span class="s">&quot;no&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'><span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">openChannel</span><span class="o">(</span><span class="s">&quot;sftp&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'><span class="n">ChannelSftp</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">ChannelSftp</span><span class="o">)</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过从官方的<a href="http://www.jcraft.com/jsch/examples/Sftp.java.html">例子</a>上看到，最需要关闭的是session对象而不是channel对象。
于是写了一个简单的测试Demo，把上面的代码跑5次，看看能不能重现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#jstack -l 3621 | grep Connect</span>
</span><span class='line'>Connect thread 192.168.1.100 session<span class="s2">&quot; prio=6 tid=0x042d3400 nid=0x1458 runnable [0x04e4f000]</span>
</span><span class='line'><span class="s2">Connect thread 192.168.1.100 session&quot;</span> <span class="nv">prio</span><span class="o">=</span>6 <span class="nv">tid</span><span class="o">=</span>0x042d0400 <span class="nv">nid</span><span class="o">=</span>0x16c8 runnable <span class="o">[</span>0x04def000<span class="o">]</span>
</span><span class='line'>Connect thread 192.168.1.100 session<span class="s2">&quot; prio=6 tid=0x041b4000 nid=0xd38 runnable [0x04d8f000]</span>
</span><span class='line'><span class="s2">Connect thread 192.168.1.100 session&quot;</span> <span class="nv">prio</span><span class="o">=</span>6 <span class="nv">tid</span><span class="o">=</span>0x041b2000 <span class="nv">nid</span><span class="o">=</span>0x166c runnable <span class="o">[</span>0x04bcf000<span class="o">]</span>
</span><span class='line'>Connect thread 192.168.1.100 session<span class="err">&quot;</span> <span class="nv">prio</span><span class="o">=</span>6 <span class="nv">tid</span><span class="o">=</span>0x041b1000 <span class="nv">nid</span><span class="o">=</span>0x450 runnable <span class="o">[</span>0x04b2f000<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>果然出现了，试着在最后调用一下session.disconnect(),重试一下果然不存在了上述线程了。</p>
]]></content>
  </entry>
  
</feed>
