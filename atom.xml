<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小毛的胡思乱想]]></title>
  <link href="http://mccxj.github.com/atom.xml" rel="self"/>
  <link href="http://mccxj.github.com/"/>
  <updated>2016-04-23T22:28:48+08:00</updated>
  <id>http://mccxj.github.com/</id>
  <author>
    <name><![CDATA[蔡晓建]]></name>
    <email><![CDATA[mc02cxj@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[svn报文转发出现handshake_failure的问题]]></title>
    <link href="http://mccxj.github.com/blog/20160416_svn-handshake-failure.html"/>
    <updated>2016-04-16T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/svn-handshake-failure</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>昨天svn报文转发xx程序突然出现连不上svn的情况，报错信息如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>org.tmatesoft.svn.core.SVNException: svn: E175002: Connection has been shutdown: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
</span><span class='line'>svn: E175002: OPTIONS request failed on &#39;/XXXX&#39;
</span><span class='line'>  at org.tmatesoft.svn.core.internal.wc.SVNErrorManager.error(SVNErrorManager.java:106)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.wc.SVNErrorManager.error(SVNErrorManager.java:90)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPConnection.request(HTTPConnection.java:798)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPConnection.request(HTTPConnection.java:398)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPConnection.request(HTTPConnection.java:386)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.DAVConnection.performHttpRequest(DAVConnection.java:863)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.DAVConnection.exchangeCapabilities(DAVConnection.java:699)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.DAVConnection.open(DAVConnection.java:118)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.DAVRepository.openConnection(DAVRepository.java:1049)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.DAVRepository.testConnection(DAVRepository.java:100)
</span><span class='line'>  ...
</span><span class='line'>  at java.lang.Thread.run(Thread.java:744)
</span><span class='line'>Caused by: javax.net.ssl.SSLException: Connection has been shutdown: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
</span><span class='line'>  at sun.security.ssl.SSLSocketImpl.checkEOF(SSLSocketImpl.java:1476)
</span><span class='line'>  at sun.security.ssl.SSLSocketImpl.checkWrite(SSLSocketImpl.java:1488)
</span><span class='line'>  at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:70)
</span><span class='line'>  at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
</span><span class='line'>  at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPConnection.sendData(HTTPConnection.java:340)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPRequest.dispatch(HTTPRequest.java:170)
</span><span class='line'>  at org.tmatesoft.svn.core.internal.io.dav.http.HTTPConnection.request(HTTPConnection.java:497)
</span><span class='line'>  ... 14 more
</span></code></pre></td></tr></table></div></figure>


<h2>初步检查</h2>

<ul>
<li>检查了svn用户名密码是正常的</li>
<li>检查了代码也没有变化，java版本也没有变更</li>
<li>初步怀疑是svn服务器做了配置更新，禁用了某些东西，由于是https，尝试开启debug信息看看</li>
</ul>


<h2>调试过程</h2>

<p>通过设置vm参数javax.net.debug=all开启网络相关的全部调试信息，可以看到:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*** ClientHello, SSLv3
</span><span class='line'>RandomCookie:  GMT: 1460716796 bytes = { 214, 15, 157, 159, 83, 144, 248, 115, 164, 210, 12, 247, 143, 96, 117, 244, 202, 251, 111, 187, 109, 171, 81, 216, 101, 89, 33, 240 }
</span><span class='line'>Session ID:  {}
</span><span class='line'>Cipher Suites: [TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
</span><span class='line'>Compression Methods:  { 0 }
</span><span class='line'>Extension elliptic_curves, curve names: {secp256r1, sect163k1, sect163r2, secp192r1, secp224r1, sect233k1, sect233r1, sect283k1, sect283r1, secp384r1, sect409k1, sect409r1, secp521r1, sect571k1, sect571r1, secp160k1, secp160r1, secp160r2, sect163r1, secp192k1, sect193r1, sect193r2, secp224k1, sect239k1, secp256k1}
</span><span class='line'>Extension ec_point_formats, formats: [uncompressed]
</span><span class='line'>***
</span><span class='line'>[write] MD5 and SHA1 hashes:  len = 149
</span><span class='line'>0000: 01 00 00 91 03 00 57 11   C5 FC D6 0F 9D 9F 53 90  ......W.......S.
</span><span class='line'>0010: F8 73 A4 D2 0C F7 8F 60   75 F4 CA FB 6F BB 6D AB  .s.....`u...o.m.
</span><span class='line'>0020: 51 D8 65 59 21 F0 00 00   2A C0 09 C0 13 00 2F C0  Q.eY!...*...../.
</span><span class='line'>0030: 04 C0 0E 00 33 00 32 C0   07 C0 11 00 05 C0 02 C0  ....3.2.........
</span><span class='line'>0040: 0C C0 08 C0 12 00 0A C0   03 C0 0D 00 16 00 13 00  ................
</span><span class='line'>0050: 04 00 FF 01 00 00 3E 00   0A 00 34 00 32 00 17 00  ......&gt;...4.2...
</span><span class='line'>0060: 01 00 03 00 13 00 15 00   06 00 07 00 09 00 0A 00  ................
</span><span class='line'>0070: 18 00 0B 00 0C 00 19 00   0D 00 0E 00 0F 00 10 00  ................
</span><span class='line'>0080: 11 00 02 00 12 00 04 00   05 00 14 00 08 00 16 00  ................
</span><span class='line'>0090: 0B 00 02 01 00                                     .....
</span><span class='line'>Thread-0, WRITE: SSLv3 Handshake, length = 149
</span><span class='line'>[Raw write]: length = 154
</span><span class='line'>0000: 16 03 00 00 95 01 00 00   91 03 00 57 11 C5 FC D6  ...........W....
</span><span class='line'>0010: 0F 9D 9F 53 90 F8 73 A4   D2 0C F7 8F 60 75 F4 CA  ...S..s.....`u..
</span><span class='line'>0020: FB 6F BB 6D AB 51 D8 65   59 21 F0 00 00 2A C0 09  .o.m.Q.eY!...*..
</span><span class='line'>0030: C0 13 00 2F C0 04 C0 0E   00 33 00 32 C0 07 C0 11  .../.....3.2....
</span><span class='line'>0040: 00 05 C0 02 C0 0C C0 08   C0 12 00 0A C0 03 C0 0D  ................
</span><span class='line'>0050: 00 16 00 13 00 04 00 FF   01 00 00 3E 00 0A 00 34  ...........&gt;...4
</span><span class='line'>0060: 00 32 00 17 00 01 00 03   00 13 00 15 00 06 00 07  .2..............
</span><span class='line'>0070: 00 09 00 0A 00 18 00 0B   00 0C 00 19 00 0D 00 0E  ................
</span><span class='line'>0080: 00 0F 00 10 00 11 00 02   00 12 00 04 00 05 00 14  ................
</span><span class='line'>0090: 00 08 00 16 00 0B 00 02   01 00                    ..........
</span><span class='line'>[Raw read]: length = 5
</span><span class='line'>0000: 15 03 00 00 02                                     .....
</span><span class='line'>[Raw read]: length = 2
</span><span class='line'>0000: 02 28                                              .(
</span><span class='line'>Thread-0, READ: SSLv3 Alert, length = 2
</span><span class='line'>Thread-0, RECV TLSv1 ALERT:  fatal, handshake_failure
</span></code></pre></td></tr></table></div></figure>


<p>和提示信息描述的一样，是在SSL握手阶段就失败了，采用的协议是SSLv3。估计是这个协议被svn服务器禁用了。<br/>
尝试配置成TLSv1，发现可以正常访问。</p>

<h2>最终处理方式</h2>

<p>由于原来的协议配置是在代码写死的，现在调整代码修改成在配置文件形式，见xxx.properties, 修改部分如下所示。<br/>
和原来一样，如果需要修改，可以在xxx-user.properties进行覆盖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># 系统属性,通过System.setProperty设置,不清楚具体含义请不要随意修改
</span><span class='line'># 调试时可以设置为all,否则设置为none
</span><span class='line'>javax.net.debug=none
</span><span class='line'>https.protocols=SSLv2Hello,SSLv3,TLSv1
</span><span class='line'>svnkit.http.sslProtocols=SSLv2Hello,SSLv3,TLSv1
</span><span class='line'>jsse.enableSNIExtension=false
</span></code></pre></td></tr></table></div></figure>


<p>或许以后用得着的内容:</p>

<ul>
<li>调试网络信息，可以考虑javax.net.debug这个参数，它的值有很多选择，可以查阅相关材料</li>
<li>svnkit的协议配置是通过svnkit.http.sslProtocols这个参数指定的</li>
<li>有空了解一下HTTPS/SSL的基本原理和过程</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heapdump分析简单总结]]></title>
    <link href="http://mccxj.github.com/blog/20160216_heapdump-intro.html"/>
    <updated>2016-02-16T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/heapdump-intro</id>
    <content type="html"><![CDATA[<ul>
<li>详细的材料可以查看<a href="https://issuu.com/sadybaez/docs/heapanalyzer13wste0921">IBM的HeapAnalyzer胶片</a>。</li>
<li>本文只是自己的一些简单总结(废话比较多)，<strong>重点还是大家基于实际dump文件去积累经验</strong>。</li>
<li>就一个工具，大家都掌握好了就可以有更多时间研究其他东西。</li>
</ul>


<h2>heapdump是什么</h2>

<ul>
<li>通常的名字类似heapdump.20150919.162323.43385076.0055.phd，参考ppt的第12页</li>
<li><strong>java堆内存快照(不包括jni，不是c/c++通常说的那个堆)</strong></li>
<li>用来分析oom的原因</li>
</ul>


<h2>heapdump如何生成</h2>

<ul>
<li>参考ppt的第8~12页，通常维护/CMO都知道</li>
<li>需要注意的是，大型中间件的dump是挺大的，需要有足够的硬盘空间，否则<strong>频繁的dump会导致空间不足引发其他问题</strong>。(频繁dump在生产上是可能的事情)</li>
</ul>


<h2>heapdump分析用什么工具</h2>

<ul>
<li>使用IBM HeapAnalyzer(目前最新ha456.jar, 比之前的版本有更多视图，性能更好)</li>
<li>启动方式: <strong>java -jar -Xms512m -Xmx3g ha456.jar</strong></li>
<li>通常要文件大小5倍+的内存, 而websphere之类的dump多在500m以上，所以需要64位的大内存机器，用64位的jdk，堆内存开2g以上</li>
<li>工具需要界面，如果大内存64位机器如果只能找到服务器，可以采用远程运行(但受网速影响)。参考&#8221;export DISPLAY=192.168.88.71:0.0&#8221;设置xmanager的远程界面显示</li>
</ul>


<h2>ha概念要点</h2>

<ul>
<li>本质上是根据对象引用关系生成一个树结构(可以结合gc的原理加深理解)，参考ppt的第14页</li>
<li>结合图例说明</li>
</ul>


<p><img src="http://mccxj.github.com/assets/images/2016/heapdump1.png" alt="图例说明" /></p>

<h2>ha关注要点</h2>

<ul>
<li>关注Leak Suspect,这是检测出来的可能的问题点，有时候非常方便。参考ppt的第34~37页</li>
<li>关注内存占用比例较大的对象，ha支持按TotalSize大小顺序排列(如上图)</li>
<li>关注节点数众多的情况，而且基本上是挂靠在容器上的(不大可能一个对象有n多内部变量)，常见的有map,array,list</li>
<li>关注自己的类，com.huawei开头的。ha支持查询，参考ppt的第54~59页。</li>
<li>有多种维度的视图，多摸索，例如Type List就可以根据特定类型的对象数量进行排序，或许可以找到一些小的内存问题。</li>
<li>如果能够拿到javacore,可以进行对比，定位是哪个功能引起的(单靠类名不一定能够识别哪个业务)。</li>
</ul>


<h2>常见的原因</h2>

<p>常见的问题原因如下(有交集，并没有严格分类)：
* 内存设置太低，不过这个几率比较小。一般的web应用内存分配2G还不够，调大也不是办法。
* 大量的线程泄露(或者某种原因阻塞)，java的线程是系统线程，占用的资源还是可观的，相关的可以看Xss参数。生产一般看到的websphere也就300左右。
* 查询/导出大量数据, 常见于SQL查询结果没有限制数量、或者在内存中集中写出。
* 远程调用传输大量数据，常见于cics返回大量数据(其实和上面差不多是一个道理)
* 上传并处理数据，没有分批分段处理或延后处理。
* 数据没能及时释放，可能是处理较多的数据或较长的处理流程，不过需要显式释放对象引用的情况是比较少见的。</p>

<p>不过，需要注意的是:
* 像dbc这样的jni实现可能和这个没什么关系，原因在于64位机器进程空间很大。
* 像数据库，远程调用等响应慢，是不一定会出现dump问题的。但它会导致线程数增多(同步)，数据(占用内存)未及时处理，从而导致dump。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[源码阅读应该得到什么?]]></title>
    <link href="http://mccxj.github.com/blog/20160105_source-reading.html"/>
    <updated>2016-01-05T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/source-reading</id>
    <content type="html"><![CDATA[<p>我们平时会接触到不少开源项目, 很多人都期望能够通过阅读源码理解更多东西，把从中学到的东西用于平时的框架使用，设计和编码实现过程。</p>

<p>不过，浩瀚的代码量，应该关注什么? 作为一个屌丝程序员，分享一下屌丝经验:</p>

<ol>
<li>首先，你应该有一定的使用经验。从使用中，去找相关特性是如何实现的。</li>
<li>最好阅读一下官方文档，了解使用的场景，高层设计、特性介绍。做到心中有数。</li>
<li>关于设计模式。提前学习一下还是有用的，学习源码的时候就不用揪着设计模式不放，会崩溃的。</li>
<li>同上，很多源码书会画很庞大的类图，时序图等。这些看上去很高大上，然并卯。</li>
<li>还是要带的问题去跟踪，一次跟踪一小部分，就是一次要有一个关注点，集中分析。别走马观花。</li>
<li>建议使用maven等高大上工具关联源码，应该多调试调试，但是单步调试帮助不大。</li>
<li>同上，应该提高代码&#8221;猜想&#8221;能力,大步调试过去，验证自己的猜测。</li>
<li>linus说: 烂程序员关心的是代码。好程序员关心的是数据结构和它们之间的关系。</li>
<li>多补充理论知识。虽然很花时间。</li>
<li>凑数的，找个感兴趣的开始吧。</li>
</ol>


<p>上面废话很多，下面来个事例。</p>

<p>commons httpclinet 3.x 这是一个很超好用的库，实际上也是比较容易理解的。</p>

<p>我阅读的时候，列了一下自己的关注点或者问题列表。</p>

<ul>
<li>如何打开HttpClient库的详细日志</li>
<li>httpclient默认参数有哪些?如User Agent、Charset怎么进行定制?</li>
<li>httpclient的连接是怎样管理的? 内部是连接池还是什么? HttpClient能用于多线程环境么?如何应用?</li>
<li>关于MultiThreadedHttpConnectionManager的数据结构是怎样的?</li>
<li>uri和content中的字符编码是怎么处理的? 例如像处理带中文的路径。</li>
<li>HttpClient#executeMethod实现细节，为什么hostconfig要克隆一份?为什么不能直接设置?</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">hostconfig</span> <span class="o">==</span> <span class="n">defaulthostconfig</span> <span class="o">||</span> <span class="n">uri</span><span class="o">.</span><span class="na">isAbsoluteURI</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// make a deep copy of the host defaults</span>
</span><span class='line'>        <span class="n">hostconfig</span> <span class="o">=</span> <span class="o">(</span><span class="n">HostConfiguration</span><span class="o">)</span> <span class="n">hostconfig</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">isAbsoluteURI</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">hostconfig</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>HttpClient、HttpMethod(GetMethod、PostMethod)、HostConfiguration、HttpConnectionManager、HttpClientParams、HttpConnection、HttpState、AuthChallengeProcessor主要负责什么?</li>
<li>命令行参数、HttpClient、HttpMethod、HostConfiguration都可以设置params，有区别? 参数在框架中是怎样存储的?</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">httpClient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setConnectionManagerTimeout</span><span class="o">(</span><span class="mi">30000L</span><span class="o">);</span>
</span><span class='line'>    <span class="n">httpClient</span><span class="o">.</span><span class="na">getHostConfiguration</span><span class="o">().</span><span class="na">getParams</span><span class="o">().</span><span class="na">setLongParameter</span><span class="o">(</span>
</span><span class='line'>            <span class="n">HttpClientParams</span><span class="o">.</span><span class="na">CONNECTION_MANAGER_TIMEOUT</span><span class="o">,</span> <span class="mi">30000L</span><span class="o">);</span>
</span><span class='line'>    <span class="n">GetMethod</span> <span class="n">post</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GetMethod</span><span class="o">(</span><span class="s">&quot;http://10.132.10.59:4567&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setHttpElementCharset</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>HttpClient会自动处理请求跳转? 会不会出现死循环? 怎样的响应才会自动跳转? 如何关闭这个特性</li>
<li>HttpClient的自动重试功能是怎样? 怎么进行定制?</li>
<li>HttpClient是使用java自带的HttpUrlConnection实现的么? 报文是怎么组装和解析的?</li>
<li>连接超时、读取超时、读写缓冲区、还有禁用Nagle等常见属性如何设置?</li>
<li>多次调用之间的cookie怎么管理的?</li>
<li>chunked模式是怎么实现的? 多大刷一次?</li>
</ul>


<p>大家可以参考这个，在阅读的时候，列出问题列表，然后从源码中找找答案。</p>

<p><strong>细节是魔鬼:)</strong></p>

<p><strong>========================华丽的分割线========================</strong></p>

<p>关于第8点，以MultiThreadedHttpConnectionManager为例，如何分析数据结构? (昨晚分析的，时间有限，不保证正确性)</p>

<p>从本质来说，整个链接管理的结构是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">维护一个</span><span class="n">connectionPool</span><span class="o">,</span> <span class="err">内部维护一个</span><span class="n">mapHosts</span><span class="err">，它的结构是</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">HostConfiguration</span><span class="o">,</span> <span class="n">HostConnectionPool</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">HostConnectionPool</span><span class="err">的内部结构是两个链表，</span><span class="n">freeConnections</span><span class="err">维护空闲连接，</span><span class="n">waitingThreads</span><span class="err">维护正在等待连接的线程</span>
</span><span class='line'>
</span><span class='line'><span class="err">还有一个静态的</span><span class="n">ReferenceQueue</span><span class="err">和</span><span class="n">ReferenceQueueThread</span><span class="err">，用来实现防止某些连接丢失的情况。至于是怎么做到丢失的连接能够回到</span><span class="n">ReferenceQueue</span><span class="err">，就是通过对</span><span class="n">HttpConnection</span><span class="err">进行加强得到的。</span>
</span><span class='line'>
</span><span class='line'><span class="err">实际上通过管理器得到的</span><span class="n">HttpConnection</span><span class="err">是经过层层代理的。层次是这样的</span><span class="o">:</span> <span class="n">HttpConnectionAdapter</span> <span class="o">-</span> <span class="n">HttpConnectionWithReference</span> <span class="o">-</span> <span class="n">HttpConnection</span>
</span><span class='line'><span class="n">HttpConnectionWithReference</span><span class="err">就是通过一个</span><span class="n">WeakReference</span><span class="err">关联到</span><span class="n">ReferenceQueue</span><span class="err">，这样根据弱引用特性，一定可被回收就会进入</span><span class="n">ReferenceQueue</span><span class="err">从而被线程扫描到。</span>
</span><span class='line'>
</span><span class='line'><span class="err">为了实现闲时连接关闭的功能，使用了</span><span class="n">IdleConnectionHandler</span><span class="err">，它的内部结构是有个</span><span class="n">Map</span><span class="err">记录空闲连接</span><span class="o">(</span><span class="err">在</span><span class="n">releaseConnection</span><span class="err">的时候放入</span><span class="o">)</span><span class="err">和当时的时间。</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码就是围绕这些核心数据结构进行操作的。通过上面的基本结构，就可以实现以下特性:</p>

<ol>
<li>总连接数和每主机总连接数限制。连接数默认50，每host默认2连接(经常容易忽略，通常需要定制)</li>
<li>能够防止连接丢失。如上面所说，拿出去的HttpConnection是加强过的，会关联到一个静态的ReferenceQueue,并使用一个线程ReferenceQueueThread不停监听并回收。</li>
<li>实现了获取连接的超时限制。就是通过waitingThreads实现的。当找不到空闲连接的时候就添加进去，然后wait。如果有releaseConnection的时候，就会interupt等待的第一个线程。我个人认为线程有可能被interupt之后仍然占用不到连接，从而排到最后去，真是悲剧。</li>
<li>能够支持连接闲时关闭。这个默认是需要主动触发，通过IdleConnectionHandler比较时间来实现的。</li>
</ol>


<p>最后，这个类是支持多线程的，主要是使用了同步机制，锁定ConnectionPool对象实现的。<br/>
另外，HttpConnection对象实际上并不是一个正式的连接，要open之后才会真的建立连接。<br/>
实际上也是一个lazy代理对象，可以避免整个连接管理操作不被阻塞，只有到实际操作时open的时候才连接。</p>

<p><strong>========================华丽的分割线========================</strong></p>

<p>关于第9点，以commons-httpclient为例，这当中涉及到哪些理论基础呢? 简单列举一下:</p>

<ol>
<li>java弱引用、克隆特性</li>
<li>线程协调、中断机制</li>
<li>网络编码、http协议</li>
<li>tcp相关参数的含义</li>
<li>常见对象池化技术</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从commons-dbcp源码学习设计思路]]></title>
    <link href="http://mccxj.github.com/blog/20151226_commons-dbcp-source-view.html"/>
    <updated>2015-12-26T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/commons-dbcp-source-view</id>
    <content type="html"><![CDATA[<p>由于整个连接池的性能是由commons-pool决定的，有空再讲解一下commons-pool的实现，特别是1.x和2.x的区别。<br/>
此次分析的是commons-dbcp 1.x源码，对应commons-pool 1.x版本。</p>

<h3>commons-dbcp怎样与commons-pool集成?</h3>

<p><img src='http://mccxj.github.com/uml/f1687f9a3d48a70deaec48f69ce916b6.png'
        alt='PlantUML diagram' class='plantuml'/></p>


<p>如上图所示，集成commons-dbcp的时候采用BasicDataSource这个实现类，它的实际功能是交给PoolingDataSource的(内部是通过commons-pool来管理连接对象)。<br/>
不过,我不是很理解为什么要这么设计?</p>

<h3>commons-dbcp的连接有什么特别?</h3>

<p><img src='http://mccxj.github.com/uml/d4ed8013a27d72d70fb693af753b01cf.png'
        alt='PlantUML diagram' class='plantuml'/></p>


<p>连接这种对象有点特殊的，所以commons-dbcp提供了一些connection方面的增强特性。例如:</p>

<ul>
<li>PoolGuardConnectionWrapper是最终客户端拿到的对象，能够防止多次关闭等误操作</li>
<li>PoolableConnection是PoolGuardConnectionWrapper内部的对象，可以结合pool进行管理，最大的优势就是可以保留客户端代码无需任何改动。<strong>实际上，很多自带生命周期api的对象，一旦池化之后都会考虑这么设计。</strong></li>
<li>PoolingConnection是开启statement pool的时候PoolableConnection的内部对象，内部采用一个KeyedObjectPool进行管理(key主要是通过执行的sql语句来生成的)。不过这种对象一般不需要池化</li>
</ul>


<h3>如何优化Connection、Statement、ResultSet的生命周期管理?</h3>

<p>jdbc的api有个非常烦人的地方，就是每个Connection、Statement、ResultSet对象都是需要关闭。所以写起来代码繁琐的，很多人就跳过这些健壮性代码。<br/>
我研究了一下dbcp的实现，发现它能够发现未关闭的Statement、ResultSet对象，并在适当的时候进行关闭。</p>

<p><img src='http://mccxj.github.com/uml/c4a18a02f4cdf7e759cf87dba76133ff.png'
        alt='PlantUML diagram' class='plantuml'/></p>


<p>具体实现思路是这样的:</p>

<ul>
<li>需要实现生命周期管理的对象需要继承AbandonedTrace，这包括了DelegatingStatement、DelegatingResultSet、DelegatingConnection等</li>
<li>通过DelegatingConnection生成的statement、resultset等都是带Delegating的，也就是带trace特性的。</li>
<li>对于上图，有个特别的是DelegatingConnection的trace可能包括ResultSet，这个主要由DelegatingDatabaseMetaData产生的。因为metadata的查询不需要先有statement。</li>
<li>处理流程调用connection.close(), 会返回到池中(见PoolableConnection)， 触发PoolableConnectionFactory的passivateObject(commons-pool的内置回调)，最后触发DelegatingConnection的passivate，在这里会递归检查所有的trace。</li>
<li>注意的是，DelegatingConnection的close方法除了触发trace对象的关闭，还会关闭底层的连接对象。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AES256算法遇到 Illegal key size or default parameters的解决办法]]></title>
    <link href="http://mccxj.github.com/blog/20151216_aes256-Illegal-key-size-or-default-parameters.html"/>
    <updated>2015-12-16T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/aes256-Illegal-key-size-or-default-parameters</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">InvalidKeyException</span><span class="o">:</span> <span class="n">Illegal</span> <span class="n">key</span> <span class="n">size</span> <span class="n">or</span> <span class="k">default</span> <span class="n">parameters</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">Cipher</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">DashoA13</span><span class="o">*..)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">Cipher</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">DashoA13</span><span class="o">*..)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">Cipher</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">DashoA13</span><span class="o">*..)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">Cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">DashoA13</span><span class="o">*..)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">Cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">DashoA13</span><span class="o">*..)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">AESWithFileKey</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">AESWithFileKey</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">81</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">xxx</span><span class="o">.</span><span class="na">AESWithFileKey</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">AESWithFileKey</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">148</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Google到问题原因，链接地址如下：http://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters</p>

<p>根据回答找到下载新jar包链接地址如下：http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html<br/>
把里面的两个jar包：local_policy.jar 和 US_export_policy.jar 替换掉原来安装目录C:\Program Files\Java\jre6\lib\security 下的两个jar包就可以了</p>

<p>上面是在oracle的jdk出现的。
如果是IBM的jdk出现问题，参考<a href="http://www-01.ibm.com/support/knowledgecenter/SSAW57_7.0.0/com.ibm.websphere.nd.multiplatform.doc/info/ae/ae/twbs_tunev6wss.html">调整 Version 7.0 应用程序的 Web Services Security</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于android ndk的jni总结]]></title>
    <link href="http://mccxj.github.com/blog/20151028_android-ndk-jni.html"/>
    <updated>2015-10-28T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/android-ndk-jni</id>
    <content type="html"><![CDATA[<h2>开发工具支持</h2>

<p>主要要点如下，更详细的应该参考官方文档:</p>

<ol>
<li>需要下载android ndk，并设置ANDROID_NDK_HOME并设置PATH, 在eclipse中顺便也设置一下。</li>
<li>eclipse支持android ndk开发，只需要在项目中右键添加Android Tools > Add Native Support即可。</li>
</ol>


<h2>配置文件</h2>

<p>主要配置文件有2个: Android.mk,Application.mk,详细配置还是应该阅读官方文档。下面说一下常用配置。</p>

<h4>Application.mk</h4>

<p>详细配置参考https://developer.android.com/intl/zh-cn/ndk/guides/application_mk.html</p>

<ul>
<li>APP_STL := stlport_static 设置是否依赖的C++标准库特性，非常重要，详细参数参考https://developer.android.com/intl/zh-cn/ndk/guides/cpp-support.html#runtimes</li>
<li>APP_ABI := armeabi armeabi-v7a 设置需要生成so的平台，可以指定或者用all</li>
<li>APP_OPTIM := release 生成debug还是relase版本，默认就是release</li>
</ul>


<h4>Android.mk</h4>

<p>详细配置参考https://developer.android.com/intl/zh-cn/ndk/guides/android_mk.html<br/>
这个配置是可以一次性生成多个so文档的，只需要区分不同的LOCAL_MODULE、LOCAL_SRC_FILES即可。</p>

<p><strong>发现ndk好像默认不支持c/c++混编，所以最好统一成cpp后缀。又或者是我不清楚实际是可以的</strong></p>

<ul>
<li>LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -lz -llog -landroid 依赖的库，这个例子表示依赖zlib、android log模块及android运行库</li>
<li>LOCAL_MODULE    := protect 生成的模块名</li>
<li>LOCAL_SRC_FILES := NativeApplication.cpp NativeHelper.cpp arcfour.cpp MultiDex.cpp 就是把so需要的相关源文件列出来</li>
</ul>


<h2>jni编程</h2>

<p>剩下的内容和Android都没特别关系了，都是java jni的知识。
对于android中jni的各种限制，可以参考官方文档： http://developer.android.com/intl/zh-cn/training/articles/perf-jni.html</p>

<h4>生成native方法的头文件</h4>

<p>和普通java的没区别，用javah就可以了，就是需要在classpath中添加android的jar即可。举例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>native
</span><span class='line'>javah -cp ./bin/classes;D:<span class="se">\0</span>5programs<span class="se">\A</span>ndroid<span class="se">\a</span>ndroid-windows<span class="se">\p</span>latforms<span class="se">\a</span>ndroid-19<span class="se">\a</span>ndroid.jar -d ./jni com.huawei.g3.proxy.NativeApplication
</span></code></pre></td></tr></table></div></figure>


<p>默认生成的方法名是有特殊命名规则的(具体规则请自行查阅资料)，如果需要不同名字，可以在JNI_OnLoad中进行动态注册，参考如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">load</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">run</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clz</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">JNINativeMethod</span> <span class="n">methods</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span> <span class="s">&quot;load&quot;</span><span class="p">,</span> <span class="s">&quot;(Landroid/app/Application;)V&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="n">load</span> <span class="p">},</span> <span class="p">{</span> <span class="s">&quot;run&quot;</span><span class="p">,</span> <span class="s">&quot;(Landroid/app/Application;)V&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="n">run</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">jint</span> <span class="n">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span><span class="o">*</span> <span class="n">vm</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">vm</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">**&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">env</span><span class="p">),</span> <span class="n">JNI_VERSION_1_6</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JNI_ERR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Register methods with env-&gt;RegisterNatives.</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">methods</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">methods</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">native</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;com/huawei/g3/proxy/NativeApplication&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">RegisterNatives</span><span class="p">(</span><span class="n">native</span><span class="p">,</span> <span class="n">methods</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JNI_ERR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">JNI_VERSION_1_6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>调用java对象、方法、属性</h4>

<p>当需要和java进行交互的时候，需要通过特定的api进行调用(类似java的反射，比较麻烦)，这种方式是绕过java安全检查机制的。</p>

<p>首先，需要了解jni中的类型表示法(基本就是java字节码那套表示法)，<strong>特别注意的是内部类的写法</strong></p>

<table>
<thead>
<tr>
<th></th>
<th> Type Signature            </th>
<th> Java Type             </th>
<th> 备注                              </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Z                         </td>
<td> boolean               </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> B                         </td>
<td> byte                  </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> C                         </td>
<td> char                  </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> S                         </td>
<td> short                 </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> I                         </td>
<td> int                   </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> J                         </td>
<td> long                  </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> F                         </td>
<td> float                 </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> D                         </td>
<td> double                </td>
<td>                                   |</td>
</tr>
<tr>
<td></td>
<td> L fully-qualified-class ; </td>
<td> fully-qualified-class </td>
<td> Ljava/lang/String; 或内部类Lcom/test/A$B; |</td>
</tr>
<tr>
<td></td>
<td> [ type                    </td>
<td> type[]                </td>
<td> [I 或 [Ljava/lang/String;                                  |</td>
</tr>
<tr>
<td></td>
<td> ( arg-types ) ret-type    </td>
<td> method type           </td>
<td> ()V 或 (Ljava/lang/String;I)Z                                  |</td>
</tr>
<tr>
<td></td>
<td> V                         </td>
<td> void                  </td>
<td>                                   |</td>
</tr>
</tbody>
</table>


<p>看懂上面一套表示法，下面的代码也比较容易理解了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">jclass</span> <span class="n">contextClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;android/content/Context&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">jfieldID</span> <span class="n">fieldID</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStaticFieldID</span><span class="p">(</span><span class="n">contextClass</span><span class="p">,</span> <span class="s">&quot;MODE_PRIVATE&quot;</span><span class="p">,</span> <span class="s">&quot;I&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">jint</span> <span class="n">mpFv</span> <span class="o">=</span> <span class="p">(</span><span class="n">jint</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStaticIntField</span><span class="p">(</span><span class="n">contextClass</span><span class="p">,</span> <span class="n">fieldID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">jstring</span> <span class="n">_payload_dex</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;payload_dex&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">jclass</span> <span class="n">appClass</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;android/app/Application&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">jmethodID</span> <span class="n">methodID</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">appClass</span><span class="p">,</span> <span class="s">&quot;getDir&quot;</span><span class="p">,</span> <span class="s">&quot;(Ljava/lang/String;I)Ljava/io/File;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">jobject</span> <span class="n">dex</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallObjectMethod</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">dirMd</span><span class="p">,</span> <span class="n">_payload_dex</span><span class="p">,</span> <span class="n">mpFv</span><span class="p">);</span> <span class="c1">//obj是Application对象，传进来的</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>需要注意的时候，FindClass参数中类名是不以L开头，不以;结束的</strong></p>

<p>上面的代码，其实就完成了下面一句java代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">dex</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getDir</span><span class="o">(</span><span class="s">&quot;payload_dex&quot;</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">MODE_PRIVATE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本套路都是一样的： 找到类、找到方法或属性、调用方法或调用属性，对应的是jclass、jmethodID、jfieldID几种类型。<br/>
详细的方法应该参考jni的官方文档，也很好理解。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">*</span> <span class="n">CallStatic</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Method</span>
</span><span class='line'><span class="o">*</span> <span class="n">Call</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Method</span>
</span><span class='line'><span class="o">*</span> <span class="n">SetStatic</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Field</span>
</span><span class='line'><span class="o">*</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Field</span>
</span><span class='line'><span class="o">*</span> <span class="n">GetStatic</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Field</span>
</span><span class='line'><span class="o">*</span> <span class="n">Get</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="n">Field</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要讲一下注意点:</p>

<ul>
<li>不带后缀、带V、带A的方法名有什么区别</li>
</ul>


<p>以CallObjectMethod为例，会存在三个方法:  CallObjectMethod, CallObjectMethodV, CallObjectMethodA
这个方法都是返回Object对象(jobject)的，效果是没什么区别的，只在于参数传递机制上存在区别。</p>

<ul>
<li>类型能不完全匹配么?</li>
</ul>


<p>像java反射那样，获取方法是可以不指定参数类型的。但是jni的类型是必须完全匹配的，
例如找方法void get(HashMap map)的时候，需要使用&#8221;(Ljava/util/HashMap;)V&#8221;, 而不能使用&#8221;(Ljava/util/Map;)V&#8221;。</p>

<p>这种问题在处理api兼容性的时候就特别突出。例如下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">version</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//using hashmap</span>
</span><span class='line'>    <span class="n">ft1</span> <span class="o">=</span> <span class="s">&quot;Ljava/util/HashMap;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ft2</span> <span class="o">=</span> <span class="s">&quot;java/util/HashMap&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//using arraymap</span>
</span><span class='line'>    <span class="n">ft1</span> <span class="o">=</span> <span class="s">&quot;Landroid/util/ArrayMap;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ft2</span> <span class="o">=</span> <span class="s">&quot;android/util/ArrayMap&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jobject</span> <span class="n">mPackages</span> <span class="o">=</span> <span class="n">_getField</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">currentActivityThread</span><span class="p">,</span> <span class="s">&quot;mPackages&quot;</span><span class="p">,</span> <span class="n">ft1</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">jmethodID</span> <span class="n">methodID</span> <span class="o">=</span> <span class="n">_getMethod</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">ft2</span><span class="p">,</span> <span class="s">&quot;get&quot;</span><span class="p">,</span> <span class="s">&quot;(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">jobject</span> <span class="n">wr</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallObjectMethod</span><span class="p">(</span><span class="n">mPackages</span><span class="p">,</span> <span class="n">methodID</span><span class="p">,</span> <span class="p">(</span><span class="n">jobject</span><span class="p">)</span> <span class="n">pk</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在java中就可以不用那么烦躁，获取mPackages对象，强制转换成两个类的共同接口Map即可，省事很多。</p>

<ul>
<li>关于引用、字符串、异常处理</li>
</ul>


<p>在jni中主要有LocalRef、GlobalRef两种。正常产生的jobject对象，是属于LocalRef的，它的生命周期在当前线程的当前方法有效，类似于c/c++在栈分配的对象。 <br/>
<strong>官方tips也提到了，即使这个对象本身在本地方法返回之后仍然存在，这个引用也是无效的。而实际上只预留了16个LocalRef空间</strong></p>

<p>所以在使用上需要特别注意:</p>

<ol>
<li>不要过度分配LocalRef，及时通过DeleteLocalRef方法进行删除。或者通过EnsureLocalCapacity/PushLocalFrame预留更多，不过貌似很少需要。</li>
<li>如果需要在多次调用中保留，应该采用GlobalRef。通过NewGlobalRef/DeleteGlobalRef手动维护引用。</li>
<li>和反射一样，查找类、获取方法、获取属性都是有消耗的，在频繁调用的jni方法中，应该通过GlobalRef预先保留相关对象。</li>
<li>对于stirng类，如果和原生c字符串进行转换操作的时候，需要注意释放内存。</li>
<li>虽然C++本身也有异常处理，但是切记空指针异常不同于java，需要注意可能为NULL的代码。</li>
<li>不像java传参是传值(对象是隐含指针传递)，在c++中要注意区分传值、传指针、传引用。</li>
</ol>


<h4>通过GlobalRef优化jni的例子</h4>

<p>注意: jint等基本类型、jmethodID、jfieldID都不是jobject，不需要管理引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">jobject</span> <span class="n">decryptCipher</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jint</span> <span class="n">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span><span class="o">*</span> <span class="n">vm</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>  <span class="n">jobject</span> <span class="n">localDecryptCipher</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticObjectMethod</span><span class="p">(</span><span class="n">cipher</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span>
</span><span class='line'>          <span class="n">desbuf</span><span class="p">);</span>
</span><span class='line'>  <span class="n">decryptCipher</span> <span class="o">=</span> <span class="p">(</span><span class="n">jobject</span><span class="p">)</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">localDecryptCipher</span><span class="p">);</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">localDecryptCipher</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">JNI_OnUnload</span><span class="p">(</span><span class="n">JavaVM</span> <span class="o">*</span><span class="n">vm</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">decryptCipher</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteGlobalRef</span><span class="p">(</span><span class="n">decryptCipher</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">encryptCipher</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteGlobalRef</span><span class="p">(</span><span class="n">encryptCipher</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>操作java字符串、c字符串的例子</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">c_msg2</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">dataDir</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>  <span class="c1">// dateDir是jstring对象</span>
</span><span class='line'><span class="n">string</span> <span class="n">libPath</span><span class="p">(</span><span class="n">c_msg2</span><span class="p">);</span>
</span><span class='line'><span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">dataDir</span><span class="p">,</span> <span class="n">c_msg2</span><span class="p">);</span> <span class="c1">// 和GetStringChars不同，GetStringUTFChars方法会分配内存并进行拷贝到c字符串，所以需要手动释放</span>
</span><span class='line'><span class="n">libPath</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;/lib&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">LOGI</span><span class="p">(</span><span class="s">&quot;lib path is %s&quot;</span><span class="p">,</span> <span class="n">libPath</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="n">jstring</span> <span class="n">libDir</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">libPath</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span> <span class="c1">// 重新转换成jstring</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weblogic 11g类加载问题总结]]></title>
    <link href="http://mccxj.github.com/blog/20151023_weblogic-11g-classloader-prefer.html"/>
    <updated>2015-10-23T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/weblogic-11g-classloader-prefer</id>
    <content type="html"><![CDATA[<p><strong>本人在此之前甚少接触weblogic，家里的weblogic也是第一次安装的。如果发现错误，敬请指正。</strong></p>

<h2>问题描述</h2>

<p>XX局点升级weblogic为11g，重新发包出错。现在记录一下处理的各种问题总结。</p>

<h3>错误1: apache commons某些包的方法没有找到</h3>

<p>这是最早出现的问题，会出现类似下面的错误信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;2015-10-14 下午05时57分30秒 CST&gt; &lt;Error&gt; &lt;HTTP&gt; &lt;BEA-101017&gt; &lt;[ServletContext@1385406679[app:XXService module:XXService path:/XXService spec-version:2.5]] Root cause of ServletException.
</span><span class='line'>java.lang.NoSuchMethodError: org.apache.commons.io.FileUtils.copyInputStreamToFile(Ljava/io/InputStream;Ljava/io/File;)V
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>原因分析</li>
</ul>


<p>这是weblogic部署最常见的问题，因为weblogic会自带I一些commons-*的包，这些包的版本还比较旧。具体可以见WEBLOGIC_HOME/modules目录的jar包。</p>

<ul>
<li>此次采用的处理方式</li>
</ul>


<p>添加weblogic.xml并设置prefer-web-inf-classes，即优先加载web应用下的类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;weblogic-web-app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;container-descriptor&gt;</span>
</span><span class='line'>      <span class="nt">&lt;prefer-web-inf-classes&gt;</span>true<span class="nt">&lt;/prefer-web-inf-classes&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/container-descriptor&gt;</span>
</span><span class='line'><span class="nt">&lt;/weblogic-web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>错误2: jsp使用jstl时出现SAXParserFactory的ClassCastException</h3>

<p>这是使用prefer-web-inf-classes为true之后出现的问题，会出现类似下面的错误信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>The validator class: &quot;org.apache.taglibs.standard.tlv.JstlCoreTLV&quot; has failed with the following exception: &quot;java.lang.ClassCastException: weblogic.xml.jaxp.RegistrySAXParserFactory cannot be cast to javax.xml.parsers.SAXParserFactory&quot;.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>原因分析</li>
</ul>


<p>这是weblogic部署很常见的问题，jstl会调用sax，sax是通过spi机制加载实现，获取是weblogic的实现，但它使用的是jdk自带的javax.xml.parsers.SAXParserFactory接口。
刚好web应用下也带了jar包xml-apis-1.x.jar，它也有javax.xml.parsers.SAXParserFactory这个接口。根据prefer-web-inf-classes的设置，jstl代码中用的是这个接口。
由此可知，使用classloader并不一样，无法转换。</p>

<ul>
<li>此次采用的处理方式</li>
</ul>


<p>删除WEB-INF/lib/xml-apis-1.x.jar后本地测试该问题恢复。</p>

<h3>错误3: 出现QName的LinkageError</h3>

<p>这是错误2解决后，继续解析spring时出现的问题。</p>

<ul>
<li>原因分析</li>
</ul>


<p>这个问题和上面的差不多，太细就不深究了。</p>

<ul>
<li>此次采用的处理方式</li>
</ul>


<p>这种情况下，如果使用prefer-web-inf-classes为true，则需要排除存在QName的jar包并删除，但最后没有采用(改动太大，得不偿失)。<br/>
所以这次重新设置了prefer-web-inf-classes为false，但仍然优先加载commons，如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;weblogic-web-app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;container-descriptor&gt;</span>
</span><span class='line'>      <span class="nt">&lt;prefer-web-inf-classes&gt;</span>false<span class="nt">&lt;/prefer-web-inf-classes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;prefer-application-packages&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>org.apache.commons.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/prefer-application-packages&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/container-descriptor&gt;</span>
</span><span class='line'><span class="nt">&lt;/weblogic-web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改后本地测试ok，但发布到生产仍然失败。</p>

<h3>错误4: MemCachedClient获取key失败(序列化问题)</h3>

<p>错误3处理后，发布到生产仍然出错，报错信息如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>18:44:57.337 [[ACTIVE] ExecuteThread: &#39;0&#39; for queue: &#39;weblogic.kernel.Default (self-tuning)&#39;] ERROR com.danga.MemCached.MemCachedClient - ++++ exception thrown while trying to get object from cache for key: init_error_key_0098
</span><span class='line'>18:44:57.351 [[ACTIVE] ExecuteThread: &#39;0&#39; for queue: &#39;weblogic.kernel.Default (self-tuning)&#39;] ERROR com.danga.MemCached.MemCachedClient - com.xxx.hnxx.mybatis.entity.PlaterrorCodeBean
</span><span class='line'>java.io.IOException: com.xxx.hnxx.mybatis.entity.PlaterrorCodeBean
</span><span class='line'>  at com.schooner.MemCached.ObjectTransCoder.decode(Unknown Source) ~[MemCached-2.6.6.jar:na]
</span><span class='line'>  at com.schooner.MemCached.AscIIClient.get(Unknown Source) [MemCached-2.6.6.jar:na]
</span><span class='line'>  at com.schooner.MemCached.AscIIClient.get(Unknown Source) [MemCached-2.6.6.jar:na]
</span><span class='line'>  at com.schooner.MemCached.AscIIClient.get(Unknown Source) [MemCached-2.6.6.jar:na]
</span><span class='line'>  at com.danga.MemCached.MemCachedClient.get(Unknown Source) [MemCached-2.6.6.jar:na]
</span><span class='line'>  at com.xxx.hnxx.cache.mencached.MemcacheManagerClient.get(MemcacheManagerClient.java:162) [MemcacheManagerClient.class:na]
</span></code></pre></td></tr></table></div></figure>


<p>上面的错误信息表示获取init_error_key_0098这个可以的时候失败，实际上这个key是在应用启动的时候就塞进去的。</p>

<ul>
<li>原因分析</li>
</ul>


<p>这里有很多意想不到的事情，所以详细解释一下。</p>

<p>首先，这个出现了IOException让人联想到是否memcached服务器连接的问题。<br/>
实际上是因为库在实现java对象放入memcached的时候，有一个序列化/反序列化的过程(就是java自带的那个)，在反序列化的时候找不到类会出现ClassNotFoundException，然后库将错误信息(就是一个类名)取出重新包装为IOException。<br/>
所以，这实际上是一个类找不到的问题。</p>

<p>再者，这个问题一开始在家里的weblogic没法重现。后来我重新检查了生产上weblogic的启动日志才发现了一些差异。<br/>
关键信息如下所示，生产上的weblogic在domain的lib目录也是有jar包的，而家里的是没有的。尝试修改把jar包也拷贝一份，果然重现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;2015-10-14 下午06时44分36秒 CST&gt; &lt;Notice&gt; &lt;WebLogicServer&gt; &lt;BEA-000395&gt; &lt;Following extensions directory contents added to the end of the classpath:/weblogic/bea/user_projects/domains/PLATFORM_DOM/lib/MemCached-2.6.6.jar:/weblogic/bea/user_projects/domains/PLATFORM_DOM/lib/MyXMLSerializer-1.0.0.jar...
</span></code></pre></td></tr></table></div></figure>


<p>最后，这个问题就好解释多了。</p>

<ol>
<li>需要序列化/反序列化的类是在com.huawei下面的，这部分类指在web应用中存在。在system classloader是找不到的。</li>
<li>序列化/反序列化时候，都是由web应用中的类，调用memcached库去实现的(虽然web应用中也有，但是根据prefer-web-inf-classes设置，加载的是domain中lib目录的)</li>
<li><p>序列化只是没什么特别。但是反序列化需要加载类，很明显system classloader(memcached库的classloader)是加载不到web应用中的类的。</p></li>
<li><p>此次采用的处理方式</p></li>
</ol>


<p>有好几种方式，都列举一下:</p>

<ol>
<li>删除domain中的jar包，这样就会加载到web应用中的类，让库和需要序列化的类都有web classloader加载</li>
<li>让库也由web优先加载，如下所示</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;weblogic-web-app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;container-descriptor&gt;</span>
</span><span class='line'>      <span class="nt">&lt;prefer-web-inf-classes&gt;</span>false<span class="nt">&lt;/prefer-web-inf-classes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;prefer-application-packages&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>org.apache.commons.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>com.danga.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>com.schooner.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/prefer-application-packages&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/container-descriptor&gt;</span>
</span><span class='line'><span class="nt">&lt;/weblogic-web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>指定memcached库进行反序列化时的classloader，如下所示:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// MemCachedClient实例化时，会持有SockIOPool.getInstance()单利的引用</span>
</span><span class='line'>    <span class="n">cachedClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemCachedClient</span><span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="kc">null</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>个人推荐的优先级是2 - 3 - 1, 尽量做到容器无关，并少动全局的东西。<strong>由于目前生产上的weblogic版本已经回退，待后续上生产验证。</strong></p>

<h2>weblogic的类加载器介绍</h2>

<ul>
<li>整体的类加载器层次如下(只关注war部分)，并采用标准的双亲委托加载机制</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">WebLogic</span> <span class="n">Server</span> <span class="n">System</span> <span class="nf">classloader</span> <span class="o">(</span><span class="n">classpath</span><span class="err">、</span><span class="o">&lt;</span><span class="n">domain</span><span class="o">&gt;/</span><span class="n">lib</span><span class="o">)</span>
</span><span class='line'><span class="n">Filtering</span> <span class="nf">classloader</span> <span class="o">(</span><span class="err">空</span><span class="o">)</span>
</span><span class='line'><span class="n">Application</span> <span class="nf">classloader</span> <span class="o">(</span><span class="n">EJB</span> <span class="n">JARs</span><span class="err">、</span><span class="n">APP</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">lib</span><span class="err">、</span><span class="n">APP</span><span class="o">-</span><span class="n">INF</span><span class="o">/</span><span class="n">classes</span><span class="err">、</span><span class="n">Manifest</span> <span class="n">Class</span><span class="o">-</span><span class="n">Path</span> <span class="n">in</span> <span class="n">EJB</span> <span class="n">JARs</span><span class="o">)</span>
</span><span class='line'><span class="n">Web</span> <span class="n">application</span> <span class="nf">classloader</span> <span class="o">(</span><span class="n">WAR</span><span class="err">、</span><span class="n">Manifest</span> <span class="n">Class</span><span class="o">-</span><span class="n">Path</span> <span class="n">in</span> <span class="n">WAR</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Web application classloader可以通过weblogic.xml中的prefer-web-inf-classes优先加载war中的类，找不到才向上请求</li>
<li>Filtering classloader并不会加载任何类，而是起到控制类加载优先级的作用。通过配置<prefer-application-packages>可以限制对于指定的类不再向上请求，也就是限制范围内加载</li>
<li>配置prefer-application-packages/prefer-application-resources的话，prefer-web-inf-classes必须配置为false</li>
<li>资源(resource)的加载顺序，在开启Filtering之后，顺序为App - Web - System(App、Web仍然是符合双亲委托的)</li>
</ul>


<h2>参考材料</h2>

<ul>
<li>http://docs.oracle.com/cd/E23943_01/web.1111/e13712/weblogic_xml.htm#WBAPP599</li>
<li>http://docs.oracle.com/cd/E12839_01/web.1111/e13706/classloading.htm#WLPRG284</li>
<li>http://tobato.iteye.com/blog/1845969</li>
<li>http://tobato.iteye.com/blog/1483020</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Websphere共享库加载顺序问题]]></title>
    <link href="http://mccxj.github.com/blog/20151011_websphere-sharelib-loading.html"/>
    <updated>2015-10-11T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/websphere-sharelib-loading</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>昨天收到有个童鞋发来的一个问题咨询，如下图所示。</p>

<p><img src="http://mccxj.github.com/assets/images/2015/was-sharelib1.png" alt="问题截图" /></p>

<p>提到几个疑问:</p>

<ol>
<li>配置如图所示,然后共享库和项目自身lib下都有一个“xxxx-common.jar”，如果项目用到jar包里面的一个类，将会是共享库的还是自身lib的呢？发现是用的lib里边的。</li>
<li>现网情况也是xxlib和lib下都有那jar包，但是根据日志来看，是用共享库的。</li>
</ol>


<h2>我的疑惑</h2>

<p>现网的配置如何，暂时没查明。不过就开发环境的配置来看，我一直认为Parent First应该会走共享库的，目前的现象和我掌握的知识不匹配。</p>

<p>于是，我上网搜索了一下Websphere关于共享库的资料，主要的链接如下：</p>

<ul>
<li>http://www.ibm.com/developerworks/cn/websphere/library/techarticles/haoaili/0512/</li>
<li>http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_nativelib.html?lang=zh</li>
<li>https://10.132.10.69:9043/ibm/help/index.jsp?topic=/com.ibm.ws.console.environment/ucws_rsharedlib_inst.html</li>
</ul>


<p>通过这些链接资料的描述(不得不说，这些中文翻译很隐晦)，但的确是可以解释目前的情况的。</p>

<h2>关于Websphere共享库的理解</h2>

<p>首先，Websphere的共享库和tomcat的共享库差别很大，而我却一直以为是差不多的。<br/>
tomcat的共享库是一个独立的类加载器，并且在多个Web应用中共享。好处是明显的，共享加载的类，优化内存使用。</p>

<p>其次，Webshpere的共享库非常灵(fu)活(za)，有多种配置组合可以影响结果。具体如下:</p>

<h4>共享库是可以选择和服务器关联或者和应用关联的</h4>

<ul>
<li>和服务器关联，参考http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_server.html?lang=zh</li>
<li>和应用关联，参考http://www-01.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tcws_sharedlib_app.html?lang=zh</li>
</ul>


<h4>共享库是可以选择是否使用隔离的类装入器(就是独立的类加载器)</h4>

<p>设置参考下图所示:</p>

<p><img src="http://mccxj.github.com/assets/images/2015/was-sharelib2.png" alt="请对此共享库使用隔离的类装入器" /></p>

<h4>和共享库相关的类加载策略如下:</h4>

<ul>
<li>如果选择和服务器关联，那么将忽略&#8221;请对此共享库使用隔离的类装入器&#8221;的选项，此时共享库路径将会添加到应用程序服务器(application server)类装入器加载路径上。</li>
<li>如果选择和应用关联，并且没有设置&#8221;请对此共享库使用隔离的类装入器&#8221;,那么共享库路径将会添加到应用的类加载器加载路径上。此时共享库只有优化管理类库的作用，并不能减少重复加载类造成的内存占用。</li>
<li>如果选择和应用关联，并且设置&#8221;请对此共享库使用隔离的类装入器&#8221;,那么共享库将作为独立的类加载器，并且各个应用之间共享这个共享库。此时共享库和tomcat的共享库类似，可以减少重复加载类造成的内存占用。</li>
</ul>


<p>对于第三种情况，它的类加载顺序如下：</p>

<p>如果应用的类载入顺序选择“父类装入器装入的类最先”,即Parent First，那么顺序如下:</p>

<ul>
<li>检查相关联的库类装入器是否可以装入类。(共享库)</li>
<li>检查它的父代类装入器是否可以装入类。(应用服务器及更高)</li>
<li>检查应用程序或 WAR 模块类装入器是否可以装入类。(应用)</li>
</ul>


<p>如果应用的类载入顺序选择“本地类装入器装入的类最先”,即Parent Last，那么顺序如下:</p>

<ul>
<li>检查应用程序或 WAR 模块类装入器是否可以装入类。(应用)</li>
<li>检查相关联的库类装入器是否可以装入类。(共享库)</li>
<li>检查它的父代类装入器是否可以装入类。(应用服务器及更高)</li>
</ul>


<h2>现象解释</h2>

<ul>
<li>开发环境中，共享库和应用关联，并且没有设置&#8221;请对此共享库使用隔离的类装入器&#8221;，所以共享库路径将会添加到应用的类加载器加载路径上，相当于在一个类加载路径上存在同样的类，所以使用到lib中的是可能的。</li>
<li>生产环境中配置尚未查明，如果共享库和应用关联，并且设置&#8221;请对此共享库使用隔离的类装入器&#8221;，按同样的载入顺序设置，即Parent First，那么是会加载到共享库的。</li>
<li>如果同样是没有设置&#8221;请对此共享库使用隔离的类装入器&#8221;，那么情况如开发环境情况，使用到共享库中的也是可能的。</li>
<li>对于同一个类加载路径上存在同样的类，具体会加载哪个是不确定的，所以上述情况都是合理的。所以应该把应用中重复的jar包移除。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[was中奇怪的生僻字乱码案例]]></title>
    <link href="http://mccxj.github.com/blog/20150808_ibm-jdk-char-encoding-diff.html"/>
    <updated>2015-08-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/ibm-jdk-char-encoding-diff</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>这个今天早上提供的一个生产问题。大体是说，改资料的时候，有个客户的名字有生僻字，叫&#8221;刘&#8221;,保存之后就乱码了，变成&#8221;刘?&#8221;</p>

<h2>分析过程</h2>

<p>乱码需要确认数据传输过程中编码方式。</p>

<ol>
<li>数据是通过jQuery的ajax过来的，并且没有提前处理数据(只有组装了一个js对象)，所以是采用encodeURIComponent进行处理的，对于中文可以很粗糙的理解成UTF-8编码过。这一点通过抓包工具是可以确认的。</li>
<li>到了服务端之后会通过getParameter获取参数，由于带charsetEncoding的过滤器，并且是采用UTF-8的，那么这里拿到的字符串应该也是不会乱码的。</li>
</ol>


<p>到了这里，代码并没有特别之处。按我的理解，只要字符集能够支持这个生僻字，就不会出现乱码。<br/>
难道保存到数据库的时候乱码了? 目前数据库是用GBK的，我去查了一下GBK的字符表，的确是有这么个字的。</p>

<p>我在本机上测了一下这个字的各种功能编码转换，都是正常的。<br/>
难道又是IBM的坑? 后来我又在服务器上测试了各种情况的输出，发现有另外一个字&#8221;䶮&#8221;,除了字体大小有点不一样之外，几乎一模一样的。</p>

<p>下面整理了一个简单的测试程序，来说明这个奇怪的问题。</p>

<h2>测试结果</h2>

<p>首先要说明的是，这里有2个字,一小一大,还有它们对应的unicode和utf-8编码。<br/>
测试结果是采用secureCRT的GB18030编码显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>有两个字:       小        大
</span><span class='line'>unicode        \uE863    \u4dae
</span><span class='line'>浏览器(utf-8)   %EE%A1%A3  %E4%B6%AE
</span></code></pre></td></tr></table></div></figure>


<p>下面的测试代码，为了编译时不关心字符集，所以换成utf-8字节来生成字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Test</span><span class="o">().</span><span class="na">test</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bbs</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">18</span><span class="o">,-</span><span class="mi">95</span><span class="o">,-</span><span class="mi">93</span><span class="o">,-</span><span class="mi">28</span><span class="o">,-</span><span class="mi">74</span><span class="o">,-</span><span class="mi">82</span><span class="o">};</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bbs</span><span class="o">,</span> <span class="s">&quot;utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">utf8</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;utf-8&quot;</span><span class="o">),</span> <span class="s">&quot;iso-8859-1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//byte[] bs = utf8.getBytes(&quot;iso-8859-1&quot;);  //test case 1</span>
</span><span class='line'>        <span class="c1">//byte[] bs = x.getBytes(&quot;GBK&quot;);  //test case 2</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于Test Case 1, 测试一下字符串是不是本来就乱了。测试结果显示，2个字都正常，要输出成GB18030才是可以的(secureCRT设置GB18030编码)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;/tools/jdk1.6.0_20/bin/java -Dfile.encoding=GBK Test
</span><span class='line'>-18
</span><span class='line'>-95
</span><span class='line'>-93
</span><span class='line'>-28
</span><span class='line'>-74
</span><span class='line'>-82
</span><span class='line'>䶮?
</span><span class='line'>&gt;/opt/IBM/WebSphere/AppServer/java/bin/java -Dfile.encoding=GBK Test
</span><span class='line'>-18
</span><span class='line'>-95
</span><span class='line'>-93
</span><span class='line'>-28
</span><span class='line'>-74
</span><span class='line'>-82
</span><span class='line'>?䶮
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;/opt/IBM/WebSphere/AppServer/java/bin/java -Dfile.encoding=GB18030 Test
</span><span class='line'>-18
</span><span class='line'>-95
</span><span class='line'>-93
</span><span class='line'>-28
</span><span class='line'>-74
</span><span class='line'>-82
</span><span class='line'>䶮
</span><span class='line'>&gt;/tools/jdk1.6.0_20/bin/java -Dfile.encoding=GB18030 Test
</span><span class='line'>-18
</span><span class='line'>-95
</span><span class='line'>-93
</span><span class='line'>-28
</span><span class='line'>-74
</span><span class='line'>-82
</span><span class='line'>䶮
</span></code></pre></td></tr></table></div></figure>


<p>对于Test Case 2，主要测试一下转换成GBK字节的情况,因为这是保存到数据库的必要转换。<br/>
测试结果显示，ibm的jdk下，第一个字会编程乱码(对应的是63)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;/tools/jdk1.6.0_20/bin/java -Ddefault.client.encoding=GBK -Dfile.encoding=GBK Test
</span><span class='line'>-2
</span><span class='line'>-97
</span><span class='line'>63
</span><span class='line'>?
</span><span class='line'>&gt;/opt/IBM/WebSphere/AppServer/java/bin/java -Ddefault.client.encoding=GBK -Dfile.encoding=GBK Test
</span><span class='line'>63
</span><span class='line'>-2
</span><span class='line'>-97
</span><span class='line'>?
</span></code></pre></td></tr></table></div></figure>


<h2>现象总结</h2>

<ol>
<li>在GBK字符表中，第一个字是存在的，第二个字不存在。在GB18030中两个都存在。从显示上，也证明了GBK和GB18030并不完全兼容。</li>
<li>IBM的jdk为找不到第一个字，但能找到第二个字。oracle的jdk刚好相反。</li>
<li>尝试使用百度拼音输入的时候，是可以找到2个字的。如下图的第2和第6个字。</li>
<li>客户需要的是小的字(第一个)，但使用IBM的jdk转换GBK是找不到这个字的，一定会乱码。</li>
<li>假设从前台输入的是第二个字，IBM的jdk应该是可以正常转换并得到的&#8221;正确&#8221;的字(正确的小字)，从而保证数据库不乱码。</li>
</ol>


<p><img src="http://mccxj.github.com/assets/images/2015/yan.png" alt="yan" /></p>

<p>规避方法，选择输入第二个字(大字，截图中的第二个字，应该看不出有什么区别)。话说回来，感觉这是ibm的jdk的bug，字符对应错了。</p>

<h2>相关资料</h2>

<ul>
<li><a href="https://github.com/willonboy/ChineseToPinYin">各种字符集编码表</a></li>
<li><a href="http://ff.163.com/newflyff/gbk-list/">GBK编码表</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初始化httpClient失败原因分析]]></title>
    <link href="http://mccxj.github.com/blog/20150702_httpclient-init-fail.html"/>
    <updated>2015-07-02T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/httpclient-init-fail</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>最近有个程序上线，启动失败，堆栈提示使用httpClient进行网络请求，初始化失败。具体如下:</p>

<p>使用httpClient进行网络请求，当使用IBM J9(JDK6实现)进行运行的时候，会有以下情况:</p>

<ul>
<li>使用32位版本，在初始化DefaultHttpClient的时候出错，详细情况如下。</li>
<li>使用64位版本，可以正常启动。</li>
</ul>


<p>测试代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSSL</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">HttpPost</span> <span class="n">httpPost</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpPost</span><span class="o">(</span><span class="s">&quot;http://10.132.10.88:81/xxx/Receiver4XXX&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">httpPost</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&quot;contentType&quot;</span><span class="o">,</span> <span class="s">&quot;multipart/form-data&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">MultipartEntity</span> <span class="n">reqEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MultipartEntity</span><span class="o">();</span>
</span><span class='line'>    <span class="n">httpPost</span><span class="o">.</span><span class="na">setEntity</span><span class="o">(</span><span class="n">reqEntity</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpPost</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动命令如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -Djava.ext.dirs<span class="o">=</span>./lib/  TestSSL
</span></code></pre></td></tr></table></div></figure>


<p>出错堆栈如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalStateException</span><span class="o">:</span> <span class="n">Failure</span> <span class="n">initializing</span> <span class="k">default</span> <span class="n">SSL</span> <span class="n">context</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">createDefaultSSLContext</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">211</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">333</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">getSocketFactory</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">165</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">SchemeRegistryFactory</span><span class="o">.</span><span class="na">createDefault</span><span class="o">(</span><span class="n">SchemeRegistryFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">45</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">createClientConnectionManager</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">294</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">getConnectionManager</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">445</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">createHttpContext</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">274</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">797</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">754</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">AbstractHttpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">AbstractHttpClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">732</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">TestSSL</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">TestSSL</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">21</span><span class="o">)</span>
</span><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">createDefaultProviderInstance</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">286</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">loadAllProviders</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">218</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">access</span><span class="n">$400</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">141</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">205</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">AccessController</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">202</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">getProviderList</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">205</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">access</span><span class="n">$1300</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">141</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="o">.</span><span class="na">getProvidersList</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">645</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">jca</span><span class="o">.</span><span class="na">GetInstance</span><span class="o">.</span><span class="na">getProvidersList</span><span class="o">(</span><span class="n">GetInstance</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">79</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">jca</span><span class="o">.</span><span class="na">GetInstance</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">GetInstance</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">232</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">KeyManagerFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KeyManagerFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">16</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">createSSLContext</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">184</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">createDefaultSSLContext</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">209</span><span class="o">)</span>
</span><span class='line'>        <span class="o">...</span> <span class="mi">10</span> <span class="n">more</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析有点冗长，所以分了几个阶段来说明。</p>

<h2>问题分析(阶段1)</h2>

<p>整理一下堆栈中各部分的功能:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">createDefaultProviderInstance</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">286</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">loadAllProviders</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">218</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">access</span><span class="n">$400</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">141</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">207</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">205</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">AccessController</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">202</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">getProviderList</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">205</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="n">$NormalServices</span><span class="o">.</span><span class="na">access</span><span class="n">$1300</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">141</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">harmony</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">fortress</span><span class="o">.</span><span class="na">Services</span><span class="o">.</span><span class="na">getProvidersList</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">645</span><span class="o">)</span>   <span class="o">--</span> <span class="err">类</span><span class="n">Services</span><span class="err">在</span><span class="n">JAVA_HOME</span><span class="o">/</span><span class="n">security</span><span class="o">.</span><span class="na">jar</span><span class="o">,</span><span class="err">尝试加载所有的密码算法提供类</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">jca</span><span class="o">.</span><span class="na">GetInstance</span><span class="o">.</span><span class="na">getProvidersList</span><span class="o">(</span><span class="n">GetInstance</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">79</span><span class="o">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">jca</span><span class="o">.</span><span class="na">GetInstance</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">GetInstance</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">232</span><span class="o">)</span>          <span class="o">--</span> <span class="err">类</span><span class="n">GetInstance</span><span class="err">在</span><span class="n">JAVA_HOME</span><span class="o">/</span><span class="n">rt</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">KeyManagerFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KeyManagerFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">16</span><span class="o">)</span>   <span class="o">--</span> <span class="err">类</span><span class="n">KeyManagerFactory</span><span class="err">在</span><span class="n">JAVA_HOME</span><span class="o">/</span><span class="n">ibmjssefw</span><span class="o">.</span><span class="na">jar</span><span class="o">.</span><span class="err">这里需要获取一个算法实现，具体算法是通过</span><span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="err">的</span><span class="n">ssl</span><span class="o">.</span><span class="na">KeyManagerFactory</span><span class="o">.</span><span class="na">algorithm</span><span class="err">指定</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">createSSLContext</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">184</span><span class="o">)</span>     <span class="o">--</span> <span class="err">基于</span><span class="n">TLS</span><span class="o">/</span><span class="n">SSL</span><span class="err">协议，需要一个</span><span class="n">KeyManagerFactory</span><span class="err">来管理密钥</span>
</span><span class='line'>    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">conn</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketFactory</span><span class="o">.</span><span class="na">createDefaultSSLContext</span><span class="o">(</span><span class="n">SSLSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">209</span><span class="o">)</span>   <span class="o">--</span> <span class="err">默认会先注册</span><span class="n">http</span><span class="err">、</span><span class="n">https</span><span class="err">的处理类</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题就出现在加载密码算法提供类的过程，在java的安全体系中，这些提供类是通过JAVA_HOME/security/java.security这个配置文件指定的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 格式如下: security.provider.&lt;n&gt;=&lt;className&gt;, 序号代表优先级</span>
</span><span class='line'>security.provider.1<span class="o">=</span>sun.security.provider.Sun
</span><span class='line'>security.provider.2<span class="o">=</span>sun.security.rsa.SunRsaSign
</span><span class='line'>security.provider.3<span class="o">=</span>com.sun.net.ssl.internal.ssl.Provider
</span><span class='line'>security.provider.4<span class="o">=</span>com.sun.crypto.provider.SunJCE
</span><span class='line'>security.provider.5<span class="o">=</span>sun.security.jgss.SunProvider
</span><span class='line'>security.provider.6<span class="o">=</span>com.sun.security.sasl.Provider
</span><span class='line'>security.provider.7<span class="o">=</span>org.jcp.xml.dsig.internal.dom.XMLDSigRI
</span><span class='line'>security.provider.8<span class="o">=</span>sun.security.smartcardio.SunPCSC
</span><span class='line'>security.provider.9<span class="o">=</span>sun.security.mscapi.SunMSCAPI
</span></code></pre></td></tr></table></div></figure>


<p>在IBM的实现中，会配合另外两个配置文件(在security.jar中的org.apache.harmony.security.fortress这个包里边): services.properties和providerClassName.properties。<br/>
其中providerClassName.properties指定(提供者的标识, 实现类名)的对应关系。services.properties指定(算法,提供者的标识)的对应管理。</p>

<p><strong>这样就可以实现&#8221;寻找DES算法&#8221;，找到“提供者的标识&#8221;, 最后找到&#8221;具体的实现类”，然后就可以调用了，整个过程对开发来说是透明的。</strong>太具体的匹配逻辑就不说了，知道这点就可以了。</p>

<p>明显，加载这些类肯定用的是反射技术。不过从反编译的源码上看，IBM在具体的实现细节上有差异。</p>

<p>32位的NormalServices#createDefaultProviderInstance实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Provider</span> <span class="nf">createDefaultProviderInstance</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">ProviderInfo</span> <span class="n">paramProviderInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">setLoading</span><span class="o">();</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">getProviderClassName</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Provider</span> <span class="n">localProvider</span> <span class="o">=</span> <span class="n">createProviderInstance</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">defaultNameProviderMap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">ProviderInfo</span> <span class="n">localProviderInfo</span> <span class="o">:</span> <span class="n">defaultOrderedProviderInfoList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">localProviderInfo</span><span class="o">.</span><span class="na">getProviderClassName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">localProviderInfo</span><span class="o">.</span><span class="na">setProviderName</span><span class="o">(</span><span class="n">localProvider</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>      <span class="n">localProviderInfo</span><span class="o">.</span><span class="na">setLoaded</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">localProvider</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>64位的NormalServices#createDefaultProviderInstance实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Provider</span> <span class="nf">createDefaultProviderInstance</span><span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">ProviderInfo</span> <span class="n">paramProviderInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">loadingAndRefreshLock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">isLoaded</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">Provider</span><span class="o">)</span><span class="n">defaultNameProviderMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">getProviderName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">setLoading</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">paramProviderInfo</span><span class="o">.</span><span class="na">getProviderClassName</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Provider</span> <span class="n">localProvider</span> <span class="o">=</span> <span class="n">createProviderInstance</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">defaultNameProviderMap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">localProvider</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Services</span><span class="o">.</span><span class="na">ProviderInfo</span> <span class="n">localProviderInfo</span> <span class="o">:</span> <span class="n">defaultOrderedProviderInfoList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">localProviderInfo</span><span class="o">.</span><span class="na">getProviderClassName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">localProviderInfo</span><span class="o">.</span><span class="na">setProviderName</span><span class="o">(</span><span class="n">localProvider</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>          <span class="n">localProviderInfo</span><span class="o">.</span><span class="na">setLoaded</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">localProvider</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中createProviderInstance方法是通过classpath去加载类。<strong>对于当前这个问题来说，最重要的区别在于localProvider是否有没有判空。因为一旦找不到提供类，localProvider将会为null。</strong>
而对于目前32位的security.provider配置来说，下面两个类是放在JAVA_HOME/ext下面的:</p>

<ul>
<li>com.sun.security.sasl.Provider 在ibmsaslprovider.jar</li>
<li>com.ibm.xml.enc.IBMXMLEncProvider 在ibmxmlencprovider.jar</li>
</ul>


<p><strong>所以加载到这2个类的时候，localProvider会变成null，导致后面出现空指针。而64位只是忽略不加载而已。</strong></p>

<p><strong>尝试注释这两个security.provider，可以发现启动正常。</strong></p>

<h2>问题分析(阶段2)</h2>

<p>高大上的IBM JDK怎么会有这种问题呢? 再继续研究研究。</p>

<p>大家有没有注意到启动参数中有个 -Djava.ext.dirs=./lib/， 这个变量以前解释过.</p>

<p>大概就是说，设置classpath要一个个jar包都设置，实在麻烦，于是乎出现这个变量，大多数情况下的确很好很强大。<br/>
在少数情况下，这个变量是可能有副作用的，上面提到的问题刚好就是一个例子，导致找不到提供类。</p>

<p>默认情况下，这个变量是指向JAVA_HOME/ext目录的，对应java中的扩展类加载器，使用这个变量就相当于覆盖了扩展类加载的路径。</p>

<p><strong>所以，有另外一种解决办法，就是把原来的扩展类路径添加上去，也是可以正常启动的。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -Djava.ext.dirs<span class="o">=</span>/usr/java6/jre/lib/ext:./lib/  TestSSL
</span></code></pre></td></tr></table></div></figure>


<p><strong>其实这个变量还是比较少用的，大家可以看看其他比较有名的程序，他们的启动脚本都是读取某个目录的jar包，然后拼接成classpath再启动。</strong><br/>
<strong>直接指定目录，还有一个不好的地方就是，只要是jar格式的都会被加载(跟后缀名无关，很多人喜欢改名字进行备份的要注意了)</strong></p>

<h2>问题分析(阶段3，可略过)</h2>

<p>更多探讨，仅供有兴趣的童鞋参考</p>

<ul>
<li>提供类com.ibm.crypto.provider.IBMJCE也在ext目录的ibmjceprovider.jar中，为什么没有报错</li>
</ul>


<p>这个类很幸(悲)运(剧)的，因为有人在lib目录里边添加ibmjceprovider.jar这个包，所以它是能被加载到的。</p>

<p>具体可以添加-verbose:class参数，就可以看到的确是在ibmjceprovider.jar中加载到了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">load</span><span class="o">:</span> <span class="n">java</span><span class="o">/</span><span class="n">util</span><span class="o">/</span><span class="n">jar</span><span class="o">/</span><span class="n">JarVerifier$VerifierStream</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">load</span><span class="o">:</span> <span class="n">com</span><span class="o">.</span><span class="na">ibm</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">IBMJCE</span> <span class="nl">from:</span> <span class="nl">file:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">hwcrm</span><span class="o">/</span><span class="n">caiqs</span><span class="o">/</span><span class="n">NGSENDWF</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ibmjceprovider</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">load</span><span class="o">:</span> <span class="n">com</span><span class="o">.</span><span class="na">ibm</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">f</span> <span class="nl">from:</span> <span class="nl">file:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">hwcrm</span><span class="o">/</span><span class="n">caiqs</span><span class="o">/</span><span class="n">NGSENDWF</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ibmjceprovider</span><span class="o">.</span><span class="na">jar</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">load</span><span class="o">:</span> <span class="n">com</span><span class="o">/</span><span class="n">ibm</span><span class="o">/</span><span class="n">jsse2</span><span class="o">/</span><span class="n">IBMJSSEProvider2</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在ext目录被加载很好理解，为什么其他ibm打头的类没在ext中也能被找到</li>
</ul>


<p>在jre/lib/目录下面有个jars.cfg的配置，个人认为是IBM自己的特殊处理逻辑来的(未经证实)，我稍微加了点中文注释，大家可以看看。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># j2se的api被拆开很多个包进行开发，默认的rt.jar是会加载的(可以发现没有常见的集合类，sql类等)，欠缺的部分使用Harmony引入(不知大家有没有对印象，曾经的jdk开源实现)</span>
</span><span class='line'><span class="c"># add Harmony jars </span>
</span><span class='line'>annotation.jar
</span><span class='line'>beans.jar
</span><span class='line'>java.util.jar
</span><span class='line'>jndi.jar
</span><span class='line'>logging.jar
</span><span class='line'>security.jar
</span><span class='line'>sql.jar
</span><span class='line'>
</span><span class='line'><span class="c"># ORB，就是用于COBRA的开发api</span>
</span><span class='line'><span class="c"># jars for the IBM ORB</span>
</span><span class='line'><span class="c"># these must precede rt.jar unless we know that </span>
</span><span class='line'><span class="c"># the Sun ORB API has been removed from rt.jar </span>
</span><span class='line'>ibmorb.jar
</span><span class='line'>ibmorbapi.jar
</span><span class='line'>ibmcfw.jar
</span><span class='line'>
</span><span class='line'><span class="c"># 大家可以发现很多ibm打头的包，这些就是提供类了，看下面的注释，可以发现这些类都是在启动的时候加载的，这样就可以被加载到了。</span>
</span><span class='line'><span class="c"># List of bootclasspath jars, ordered, relative to jre/lib/</span>
</span><span class='line'>rt.jar
</span><span class='line'>charsets.jar
</span><span class='line'>resources.jar
</span><span class='line'>ibmpkcs.jar
</span><span class='line'>ibmcertpathfw.jar
</span><span class='line'>ibmjgssfw.jar
</span><span class='line'>ibmjssefw.jar
</span><span class='line'>ibmsaslfw.jar
</span><span class='line'>ibmjcefw.jar
</span><span class='line'>ibmjgssprovider.jar
</span><span class='line'>ibmjsseprovider2.jar
</span><span class='line'>ibmcertpathprovider.jar
</span><span class='line'>ibmxmlcrypto.jar
</span><span class='line'>management-agent.jar
</span><span class='line'>xml.jar
</span><span class='line'>jlm.jar
</span><span class='line'>javascript.jar
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一定是httpclient引起的么? 会影响其他库或代码么?</li>
</ul>


<p>从IBM的实现上看，只要使用到security.provider，都会出错。
例如只是简单的使用内置的DES算法实现，就像下面那样，同样也是会出错的。有兴趣可以试试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;DES&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，对于其他JDK实现，例如oracle JDK，不一定有问题(测试一下，发现的确也是没问题的)。因为jdk api是标准规范，当具体的实现并没有做要求。</p>

<h2>问题总结</h2>

<ul>
<li>IBM JDK对security.provider的处理有所不同，对于找不到的提供类，可能报错也可能不报错。目前只是一个特例，不代表在其他版本或其他JDK中存在。</li>
<li>正常情况下(除非添加自己的实现或修改配置)，security.provider都是能够被加载到的。</li>
<li>使用-Djava.ext.dirs会修改扩展类加载路径，可能导致某些提供类找不到。</li>
<li><p>有以下方式可以修复，仅供参考:</p></li>
<li><p>对httpclient进行定制，跳过https注册或自定义实现，如目前的规避代码。缺点在于仅仅是规避，对其他库可能不适用。</p></li>
<li>通过classpath代替java.ext.dirs变量，这是标准的启动方式。缺点在于脚本要重写。</li>
<li>在java.ext.dirs添加原来的ext目录，是一个方便又能解决问题的手段。缺点在于需要修改脚本, 并可能由于备份文件被加载而造成混乱。</li>
<li>通过修改java.security配置文件，屏蔽没法使用的提供类。不推荐，影响全局。</li>
<li>把ext中相关的jar包拷贝到lib目录中。目前有个jar包是这样的，不过不推荐，在不理解系统加载机制的情况下，很容易造成混乱。</li>
<li>给IBM提意见，修改一下实现方式。说说而已，别想了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Universal-Image-Loader源码快扫]]></title>
    <link href="http://mccxj.github.com/blog/20150624_Android-Universal-Image-Loader-source-view.html"/>
    <updated>2015-06-24T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/Android-Universal-Image-Loader-source-view</id>
    <content type="html"><![CDATA[<h2>ImageLoaderConfiguration/ImageLoaderConfiguration.Builder学习</h2>

<p>构造复杂对象的方式: Builder模式,用来创建ImageLoaderConfiguration对象,适用于链式写法。</p>

<p>常见结构如下：<strong>关键点: 私有构造(拷贝而非应用，避免build复写)、内部类(影响局部化,内聚好)、返回this(支持链式)</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">A</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// create A with builder&#39;s copy</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">{</span>
</span><span class='line'>     <span class="n">Builder</span> <span class="nf">buildStep1</span><span class="o">(){</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">Builder</span> <span class="nf">buildStep2</span><span class="o">(){</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">A</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ImageLoaderConfiguration支持的特性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">--</span> <span class="err">源码没什么养分，关注特性是如何表现在内部结构上。</span>
</span><span class='line'><span class="o">--</span> <span class="err">类层次的结构，能体会就体会，不体会就拉到。层次是渐进实现的，不能体会也没什么。</span>
</span><span class='line'><span class="o">--</span> <span class="err">如果有机会的话，可以在实践项目中调试进去学学。</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想学习相关特性是怎么实现的，可以根据配置的去反推实现代码(搜索或调用关系):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">基本特性（可配置）</span><span class="o">:</span>
</span><span class='line'>  <span class="err">基本控制</span><span class="o">:</span>
</span><span class='line'>    <span class="err">线程池大小</span> <span class="o">--</span> <span class="err">不能太多</span>
</span><span class='line'>    <span class="err">线程优先级</span> <span class="o">--</span> <span class="err">略低</span>
</span><span class='line'>    <span class="err">请求任务排队</span>  <span class="o">--</span> <span class="err">默认</span><span class="n">FIFO</span>
</span><span class='line'>    <span class="err">是否开启调试日志</span> <span class="o">--</span> <span class="n">DEBUG</span> <span class="n">log</span>
</span><span class='line'>  <span class="err">多级缓存特性</span><span class="o">:</span>
</span><span class='line'>    <span class="err">内存缓存大小</span>
</span><span class='line'>    <span class="err">硬盘缓存大小，文件数量限制，文件名生成规则</span>
</span><span class='line'>    <span class="o">--</span> <span class="err">关联硬盘图片处理器</span><span class="n">BitmapProcessor</span>
</span><span class='line'>  <span class="err">图片专用</span><span class="o">:</span>
</span><span class='line'>    <span class="err">缓存图最大宽高</span> <span class="o">---</span> <span class="err">用于约束图片大小</span>
</span><span class='line'>    <span class="err">显示图的约束</span>
</span><span class='line'>    <span class="o">--</span> <span class="err">关联下载器</span><span class="n">ImageDownloader</span><span class="o">(</span><span class="err">还通过</span><span class="n">networkDeniedDownloader</span><span class="o">/</span><span class="n">slowNetworkDownloader</span><span class="err">区分不同情况，这不就是</span><span class="n">Null</span> <span class="n">Object</span><span class="err">模式么</span><span class="o">?)</span>
</span><span class='line'>    <span class="o">--</span> <span class="err">关联解码器</span><span class="n">ImageDecoder</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于ImageLoader如何解决错乱问题</h2>

<p>ImageLoader就是一个singleton实现，配合init+ImageLoaderConfiguration进行初始化，没什么说的。很常见的设计实现。</p>

<p>大多是helper method 关注displayImage/loadImage最终实现即可。这也是常见做法，便于使用。</p>

<p>问题: url &#8211; 关联的view，问题在于url请求是异步的，而view可能被重复利用。<br/>
这里用的ImageAware，看他们的实现类，有个ViewAware，就是一个view的包装，我想说的是WeakReference在android中很常用呀。 &#8211; 这句是废话</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">使用</span><span class="n">ImageAware</span><span class="err">占位</span>
</span><span class='line'>  <span class="err">图片宽高</span>
</span><span class='line'>  <span class="err">实际的</span><span class="n">View</span> <span class="o">--</span><span class="err">可重用</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">--</span> <span class="err">尼玛，这是解决问题的关键</span>
</span></code></pre></td></tr></table></div></figure>


<p>见DisplayBitmapTask有个isViewWasReused倒出重点，从它的实现就可以判断完整的算法拉。</p>

<p>内部结构 cacheKeysForImageAwares map&lt;ImageAware.id, memorycachekey(由URI + 宽高生成)></p>

<p>不过ViewAware的id是用view的hashcode来指定的， NonViewAware的id是用url来指定的。<br/>
so， listview的时候，使用loadImage是可以避免错乱的，而用displayImage就呵呵拉。<br/>
判断方式如下：根据id可以找到目前的url和当前的url比较即可。知道是不是被复用了。</p>

<p>相对于原理上的image#setTag(url)然后比较的方式，更加透明，侵入性少。</p>

<h2>再看看ImageLoaderEngine在任务管理、线程方面的处理</h2>

<p>原以为这货应该比较好处理，图样图森破呀，毕竟它支持多种状态(暂停，恢复，关闭等)</p>

<p>先说一下几个AtomicBoolean的变量，主要就是判断状态的boolean拉，当然这货是线程安全的，其实用boolean也行，毕竟也是原子的(注意可见性问题即可)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicBoolean</span> <span class="n">paused</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicBoolean</span> <span class="n">networkDenied</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicBoolean</span> <span class="n">slowNetwork</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，还有3个线程执行器，简单看看用途。至于为什么要这么多个，哥认为是这样的：</p>

<ul>
<li>在loader中走进displayImage之后，它重要检查一下内存中有木有(耗时小，无需线程)。</li>
<li>如果没有才会扔给engine，engine首先检查一下硬盘上有木有(有io，所以走taskDistributor)。</li>
<li>如果硬盘上有，走taskExecutorForCachedImages(同理有io)</li>
<li>还是没有，走其他(maybe网络io)</li>
<li>在请求较多，兼顾命中、不命中的情况，它选择了采用多级的Executor</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Executor</span> <span class="n">taskExecutor</span><span class="o">;</span> <span class="o">--</span> <span class="err">木有在</span><span class="n">disk</span><span class="err">的情况，一般走网络</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Executor</span> <span class="n">taskExecutorForCachedImages</span><span class="o">;</span> <span class="o">--</span> <span class="err">在</span><span class="n">disk</span><span class="err">的情况</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Executor</span> <span class="n">taskDistributor</span><span class="o">;</span>  <span class="o">--</span> <span class="err">根据情况分发给上面</span><span class="mi">2</span><span class="err">个</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有2个map，第一个就是用来保存id和图片url的对应关系(简单是这么理解)<br/>
另外是用来控制不同view但有相同uri的并发请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">cacheKeysForImageAwares</span> <span class="o">=</span> <span class="n">Collections</span>
</span><span class='line'>      <span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ReentrantLock</span><span class="o">&gt;</span> <span class="n">uriLocks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ReentrantLock</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>不熟悉ReentrantLock的童鞋可参考 https://www.ibm.com/developerworks/cn/java/j-jtp10264/</p>

<p>LoadAndDisplayImageTask通过控制相同的uri持有同一个锁，这样执行的时候，后面的就会等待。<br/>
具体可以参考LoadAndDisplayImageTask的实现，不过用ReentrantLock需要特别注意写法，避免死锁。<br/>
不过我认为getLockForUri并没有同步，还是有存在相同url获取到不同lock的可能，不过这不影响功能，而且受限于并发大小也很难出现。</p>

<h2>关于url的中文</h2>

<p>网上有看到一些人说中文图片名会出错，可能是很久之前的版本吧。我这里要说的是，我认为这是个简单的问题，即使改源码也很容易处理。<br/>
不过即使源码有相关处理，通常也不会关注的，不过今天刚好有人问我一个中文路径的问题，所以我就关注了一下它怎么实现的。</p>

<p>首先看BaseImageDownloader是如何请求中文图片的。由于http只是支持ascii的url编码，所以必须要编码的，通常用utf-8,虽然这个没规定。貌似我们的基线没有考虑这个问题，应该是没有掉过坑。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">HttpURLConnection</span> <span class="nf">createConnection</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">Object</span> <span class="n">extra</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">encodedUrl</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">ALLOWED_URI_CHARS</span><span class="o">);</span>
</span><span class='line'>  <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">encodedUrl</span><span class="o">).</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="n">connectTimeout</span><span class="o">);</span>
</span><span class='line'>  <span class="n">conn</span><span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="n">readTimeout</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">conn</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，还有一个容易出现中文问题的就是保存到硬盘的情况(android貌似不是什么大问题，如果是做server开发的话，就得特别注意)<br/>
带的实现有HashCodeFileNameGenerator(默认)和Md5FileNameGenerator，这2种处理都不会产生中文问题。<br/>
不过我建议还是用Md5FileNameGenerator，hashcode做唯一性并不是很靠谱，如果是大量的固定文件名长度的图片，还是很容易冲突的。</p>

<h2>小结</h2>

<p>源码何其多，带着问题学习效果更好。挑几个疑惑看看别人怎么处理就是收获。  <br/>
从类的层次着手是很困难的，特别是大型源码。了解上层架构，学示例，然后调调源码或许更好。
大多数情况，相对于细节，应该更关注关键数据的结构、如何组织数据的结构来解决问题。<br/>
如果自己设计，应该考虑的重要问题有: 如何使用? 用怎样的结构表示数据和状态? <br/>
XX设计模式不要硬套，从过程式演变出来更加自然(经验性的除外)。推荐重构与模式。<br/>
大而全的源码解读没有什么用，带问题分析的更有价值。<br/>
学好基础，模仿起来也不容易掉坑。</p>

<p>&#8211; 以上纯属肉眼分辨，并无调试过，不做正确性验证，仅供参考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java字符编码问题]]></title>
    <link href="http://mccxj.github.com/blog/20150114_java-charset-problem.html"/>
    <updated>2015-01-14T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/java-charset-problem</id>
    <content type="html"><![CDATA[<p>1.假设文件用UTF-8保存了中文&#8221;操作计算机&#8221;，然后使用GBK编码进行读取?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/myfile&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，后续转成UTF-8仍然有部分乱码，如果保存的内容是&#8221;操作计算&#8221;就不会乱码。为什么?</p>

<p>2.继续上述问题，如果使用ISO-8859-1进行读取?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/myfile&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现，可以发现无论是&#8221;操作计算机&#8221;还是&#8221;操作计算&#8221;、&#8221;操 作计算&#8221;，都不会乱码。为什么?</p>

<p>3.如果文件采用GBK编码保存中文，但是使用UTF-8读取，就会发现怎么转都是乱码? 为什么?</p>

<p>4.假设代码如下，为什么前面3行都是输出乱码?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.请思考，下面的同样掺和了ISO-8859-1，为什么却能正常?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;123你&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;GBK&quot;</span><span class="o">),</span> <span class="s">&quot;ISO-8859-1&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">),</span> <span class="s">&quot;GBK&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.假设使用http发送xml，那么xml报文采用何种编码发送和xml的编码头部指定的编码有什么关系?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;GBK&quot;</span> <span class="o">?&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用net.sf.json库进行json反序列化时存在的问题]]></title>
    <link href="http://mccxj.github.com/blog/20150108_net-sf-json-problem.html"/>
    <updated>2015-01-08T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/net-sf-json-problem</id>
    <content type="html"><![CDATA[<h3>问题描述</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;{\&quot;response_head\&quot;:{\&quot;menuid\&quot;:\&quot;xxx\&quot;,\&quot;process_code\&quot;:\&quot;xxx\&quot;,\&quot;verify_code\&quot;:\&quot;\&quot;,\&quot;resp_time\&quot;:\&quot;20150107103234\&quot;,\&quot;sequence\&quot;:{\&quot;resp_seq\&quot;:\&quot;20150107103301\&quot;,\&quot;operation_seq\&quot;:\&quot;\&quot;},\&quot;retinfo\&quot;:{\&quot;retcode\&quot;:\&quot;120\&quot;,\&quot;rettype\&quot;:\&quot;0\&quot;,\&quot;retmsg\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}},\&quot;response_body\&quot;:{} }&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">JSONObject</span> <span class="n">object</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">fromObject</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{&quot;response_head&quot;:{&quot;menuid&quot;:&quot;xxx&quot;,&quot;process_code&quot;:&quot;xxx&quot;,&quot;verify_code&quot;:&quot;&quot;,&quot;resp_time&quot;:&quot;20150107103234&quot;,&quot;sequence&quot;:{&quot;resp_seq&quot;:&quot;20150107103301&quot;,&quot;operation_seq&quot;:&quot;&quot;},&quot;retinfo&quot;:{&quot;retcode&quot;:&quot;120&quot;,&quot;rettype&quot;:&quot;0&quot;,&quot;retmsg&quot;:[&quot;182096|&quot;]}},&quot;response_body&quot;:{}}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题分析</h3>

<p>采用json-lib-2.4-jdk15.jar，测试代码如上，会发现retmsg的值变成&#8221;[182096|&#8221;.</p>

<p>测试简化json字符串，最终效果如下：</p>

<p>解析失败的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:{\&quot;retmsg\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续简化的话，就会解析成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:\&quot;[182096|]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>找了一下源码，发现json-lib在某些情况下(绕来绕去，断点发现的)会尝试解析字符串，看看是不是json对象。（尼玛，太智能了）</p>

<p>AbstractJSON.java中的260行,这个时候str是后面的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">mayBeJSON</span><span class="o">(</span> <span class="n">str</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">JSONSerializer</span><span class="o">.</span><span class="na">toJSON</span><span class="o">(</span> <span class="n">str</span><span class="o">,</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span> <span class="n">JSONException</span> <span class="n">jsone</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JsonArray.java中的1130行，这个时候v已经是&#8221;182096|&#8221;。这个时候会判断v是不是一个json对象，如果搞一个数组回去，否则就是搞一个字符串(上述现象)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>           <span class="n">tokener</span><span class="o">.</span><span class="na">back</span><span class="o">();</span>
</span><span class='line'>           <span class="n">Object</span> <span class="n">v</span> <span class="o">=</span> <span class="n">tokener</span><span class="o">.</span><span class="na">nextValue</span><span class="o">(</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>           <span class="k">if</span><span class="o">(</span> <span class="o">!</span><span class="n">JSONUtils</span><span class="o">.</span><span class="na">isFunctionHeader</span><span class="o">(</span> <span class="n">v</span> <span class="o">)</span> <span class="o">){</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span> <span class="n">v</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">mayBeJSON</span><span class="o">(</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">v</span> <span class="o">)</span> <span class="o">){</span>
</span><span class='line'>                 <span class="n">jsonArray</span><span class="o">.</span><span class="na">addValue</span><span class="o">(</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">DOUBLE_QUOTE</span> <span class="o">+</span> <span class="n">v</span> <span class="o">+</span> <span class="n">JSONUtils</span><span class="o">.</span><span class="na">DOUBLE_QUOTE</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>              <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>                 <span class="n">jsonArray</span><span class="o">.</span><span class="na">addValue</span><span class="o">(</span> <span class="n">v</span><span class="o">,</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">fireElementAddedEvent</span><span class="o">(</span> <span class="n">index</span><span class="o">,</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">index</span><span class="o">++</span> <span class="o">),</span> <span class="n">jsonConfig</span> <span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如，下面的情况会产生一个数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;{\&quot;response_head\&quot;:{\&quot;retmsg\&quot;:\&quot;[{1820: 96|}]处理失败,原因:[屏蔽具体的失败原因！]\&quot;}}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;response_head&quot;</span><span class="p">:{</span><span class="nt">&quot;retmsg&quot;</span><span class="p">:[{</span><span class="nt">&quot;1820&quot;</span><span class="p">:</span><span class="s2">&quot;96|&quot;</span><span class="p">}]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于如何判断是否是json,是会判断以[开头，以]结束的，刚好中枪。而尝试去截取中间内容的时候，又碰巧遇到中间的]字符，所以生成的字符串就是被截断了一部分的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">    * Tests if the String possibly represents a valid JSON String.&lt;br&gt;</span>
</span><span class='line'><span class="cm">    * Valid JSON strings are:</span>
</span><span class='line'><span class="cm">    * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;&quot;null&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;starts with &quot;[&quot; and ends with &quot;]&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;li&gt;starts with &quot;{&quot; and ends with &quot;}&quot;&lt;/li&gt;</span>
</span><span class='line'><span class="cm">    * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">mayBeJSON</span><span class="o">(</span> <span class="n">String</span> <span class="n">string</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">string</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="s">&quot;null&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">string</span> <span class="o">)</span>
</span><span class='line'>                  <span class="o">||</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span> <span class="s">&quot;[&quot;</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span> <span class="s">&quot;]&quot;</span> <span class="o">))</span> <span class="o">||</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span> <span class="s">&quot;{&quot;</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span> <span class="s">&quot;}&quot;</span> <span class="o">)));</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题结论</h3>

<ul>
<li>当json对象中某个值是以&#8221;{&#8220;开头，&#8221;}&#8221;结束，或者&#8221;[&#8220;开头,&#8221;]&#8221;结束的时候，解析结果可能不是期望的。</li>
<li>不幸的是，目前来看，这个问题是无解的，考虑使用其他json库吧。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编码与乱码问题]]></title>
    <link href="http://mccxj.github.com/blog/20150107_charset-intro.html"/>
    <updated>2015-01-07T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/charset-intro</id>
    <content type="html"><![CDATA[<h2>关于java的编码</h2>

<ul>
<li>java的源代码编码格式和最终的运行是没什么关系的。你可以使用GBK或UTF-8来编程。</li>
<li>java编译后的class文件都是使用UTF-16来存储和运行的。</li>
<li>在eclipse中是根据文件设置字符编码来编译的，所以可以对不同文件使用有不同的编码，但这个不推荐。</li>
<li>使用javac编译可以通过-encoding指定字符编码,如果不指定，会使用系统默认编码，这个跟平台有关。所以使用ant需要指定编码。</li>
</ul>


<p>下面这种在ant中常见的警告，就是表示编译用的编码和编程的编码不一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CCustGroupPrompt</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">43</span><span class="o">:</span> <span class="err">警告：编码</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span> <span class="err">的不可映射字符</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多java相关的，见<a href="20150114_java-charset-problem.html">java字符编码问题</a></p>

<h2>关于jsp的编码</h2>

<ul>
<li>jsp内容字符编码是pageEncoding指定的，用于指导jsp的编译器进行编译成java/class文件。如果没设置会采用contentType。</li>
<li>contentType是用于response的输出http报文时的编码，浏览器根据ContentType来采用何种字符编码显示。和使用response.setCharacterEncoding()是一个道理的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;%</span><span class="err">@</span> <span class="n">page</span> <span class="n">contentType</span><span class="o">=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果page设置的内容，和页面中的meta设置不一样，那又怎样?</p>

<ul>
<li>meta是用来设置当前网页后续处理的默认编码，和当前页面的响应无关。</li>
<li>只要page设置和jsp文件内容实际字符编码一致，就不会乱。</li>
</ul>


<p>如果不设置page，那又怎样?</p>

<ul>
<li>如果没有指定page的话， contentType默认是text/html，浏览器会根据meta指定的编码来解析报文。这个时候，如果jsp内容实际编码和meta指定的编码一样，就能够显示正常。</li>
<li>编译后的java文件内容，其实都是不能显示中文的。经测试，发现是用的ISO-8859-1读取的文件,并转换成UTF-8的java文件。</li>
<li>如果使用UTF-16来编写jsp，但是不指定page，编译后的java和class反编译都是能够显示中文的。并且在tomcat下(其他未测试)，即使meta设置的编码不一样，也能够显示中文，因为这个时候contentType变成text/html;charset=UTF-16BE，具体大家可以查看编译后的java文件。感觉在编译的时候能够优先识别到UTF-16一样。</li>
</ul>


<p>上述情况只是在tomcat上测试过，并不代表其他在中间件也是同样的情况，实际应用中应该确保jsp内容的字符编码、page设置、meta设置保持一致，避免一些灵异事件。</p>

<h2>关于URL的编码</h2>

<p>这里指直接通过URL传递中文，或者手工拼接中文到URL的情况，究竟使用何种编码传递没有规定，看浏览器心情，不具可移植性。
对于IE来说，虽然高级选项上有个发送UTF-8 URL，但不一定会勾上。如果真的要使用，应该自行编码后传递。</p>

<h2>普通表单提交</h2>

<p>使用GET或者POST，对于编码来说，没有区别。
都会对中文进行编码，编码采用页面的字符编码。</p>

<p>例如&#8221;中文&#8221;的UTF-8编码是E4B8ADE69687，传递的内容就是%E4%B8%AD%E6%96%87。</p>

<p>页面编码是通过<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">指定的。
而html5页面可以通过<meta charset="utf-8">这种简化形式指定。</p>

<h2>表单文件上传</h2>

<p>需要使用POST，并在form中增加属性enctype=&#8221;multipart/form-data&#8221;。
不会对文件名、输入框内容进行字符编码。
采用页面的字符编码，对内容原样传输。</p>

<p>区别可能不是很好理解，下面举例：
例如&#8221;中文&#8221;的UTF-8编码是E4B8ADE69687，传递的内容是字节E4B8ADE69687，或许在某些工具上可以直接看到“中文”.(像fiddler用utf-8来显示的)</p>

<h2>Java/Servlet/Struts2(commons-upload)对参数的处理</h2>

<p>Java/Servlet对参数的处理
* 默认只能获取到普通表单的参数提交。
* 编码格式通过request.setCharacterEncoding(&#8220;UTF-8&#8221;)指定，这个已经有过滤器可以实现的了。
* 使用Struts2的话，对multipart/form-data的提交也是能够获取通过getParameter取到参数的。</p>

<p>注意的是，有些实现(如tomcat)，对参数的解析是延后处理的，设置了编码之后，获取一个参数(这个时候参数全部都解析了)，再设置编码是没有效果。ServletRequest的setCharacterEncoding描述也是这么说的。</p>

<p>标准的commons-upload，文件名的获取、输入框内容的获取使用的编码可能不一样。
* 文件名的获取，就是FileItem.getName(),解析编码需要通过ServletFileUpload#setHeaderEncoding这个方法设置，如果没有设置，采用平台编码(可以通过-Dfile.encoding=UTF-8来指定，否则win通常是ANSI(GBK),unix看locale)
* 输入框内容，就是FileItem.getString(),可以指定解析编码，如果不指定采用ISO-8859-1。</p>

<p>Struts2默认使用commons-upload进行文件上传的处理。
* 对于文件名的获取没有通过setHeaderEncoding设置，所以这个通常会依赖于平台编码(需要确保平台编码和页面编码一致)
* 对于输入框内容的获取，指定了编码格式为request.getCharacterEncoding()，否则采用默认的ISO-8859-1。所以这个需要提前设置一下CharacterEncoding，否则也可能会乱码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见DES实现陷阱]]></title>
    <link href="http://mccxj.github.com/blog/20141229_des-hack.html"/>
    <updated>2014-12-29T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/des-hack</id>
    <content type="html"><![CDATA[<h3>DES要点说明</h3>

<ul>
<li>DES走的是分组加密，每次处理对象的是8位byte，所以对字符串加解密的时候，会涉及字符编码格式和补齐8位的问题。</li>
<li>DES的密钥是固定8位的byte的，其中前7位是加解密用的，最后一位是校验码。</li>
<li>3DES的增强型的DES，带3个key，如果3个key一样，就是DES，也有一种变种是1、3是一样的。但都是固定8位的。</li>
<li>3DES通常是EDE,就是先加密(k1)再解密(k2)再加密(k3)</li>
</ul>


<p>目前，项目代码中有3个和DES实现相关的类,下面看看他们有哪些问题：</p>

<h3>案例1</h3>

<ul>
<li>从字符串到byte的转换，有指定编码格式GBK，这个是可以接受的。</li>
<li>使用的是DESede,就是3DES的EDE加密方式，但是3个key是一样的，没有意义。</li>
<li>加密时代码先自行进行了补齐操作(补\0),但是补齐是在字符串上操作的，不是在字节上操作，导致实际上可能没有对齐(中文情况)。</li>
<li>调用加密API时，没有指定补齐方式，会采用默认补齐，造成重复补齐(当然也修复了上面的补齐操作)。</li>
<li>解密指定NoPadding，和加密Padding方式不一样，造成解密结果最后会出现很多多余的字节。所以结果必须得trim一下才行。</li>
</ul>


<p>参考代码如下：</p>

<p>补齐实现有误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">strIn</span> <span class="o">=</span> <span class="n">in</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">strIn</span> <span class="o">||</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">strIn</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">strIn</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strIn</span> <span class="o">+=</span> <span class="s">&quot;\0&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strIn</span> <span class="o">+=</span> <span class="s">&quot;\0&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">strIn</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">CHARSET</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">enbytes</span> <span class="o">=</span> <span class="n">encryptCipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">byteArrToHexStr</span><span class="o">(</span><span class="n">enbytes</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key是一样的，补齐方式没对应上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">DESedeEncrypt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>            <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span>
</span><span class='line'>            <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span><span class="o">,</span> <span class="mh">0x31</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SecretKeySpec</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecretKeySpec</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="s">&quot;DESede&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">encryptCipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">KEY_ALGORITHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">encryptCipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">decryptCipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;DESede/ECB/NoPadding&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">decryptCipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Throwables</span><span class="o">.</span><span class="na">propagate</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>案例2</h3>

<ul>
<li>从字符串到byte的转换，采用了系统默认编码，存在平台移植性问题。</li>
<li>密钥key的长度布置8位，有多余字符(虽然只取前8位避免出错)，造成混乱。</li>
</ul>


<p>key的格式不标准，有多余字符:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">strDefaultKey</span> <span class="o">=</span> <span class="s">&quot;mywebsite123456%&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Key</span> <span class="nf">getKey</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">arrBTmp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">arrB</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrBTmp</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrB</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">arrB</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arrBTmp</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">javax</span><span class="o">.</span><span class="na">crypto</span><span class="o">.</span><span class="na">spec</span><span class="o">.</span><span class="na">SecretKeySpec</span><span class="o">(</span><span class="n">arrB</span><span class="o">,</span> <span class="s">&quot;DES&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>案例3</h3>

<ul>
<li>从字符串到byte的转换，采用了系统默认编码，存在平台移植性问题。</li>
<li>实现不是标准的DES，或3DES，是在DES基础上定义了一套加密。</li>
<li>根据目前key的长度，比标准3DES都要慢很多，另外没有采用JDK带的API。</li>
</ul>


<p>key的长度不标准：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesUtil</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstKey</span> <span class="o">=</span> <span class="s">&quot;com.xxx.xxxpro&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">secondKey</span> <span class="o">=</span> <span class="s">&quot;xxx_web&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">thirdKey</span> <span class="o">=</span> <span class="s">&quot;xxxservice&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现方式是对每个key补齐8位，再切割形成每组多个8位的key，再采用EEE的方式进行处理:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">firstLength</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">firstKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">secondLength</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">secondKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">for</span> <span class="o">(</span><span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">z</span> <span class="o">&lt;</span> <span class="n">thirdLength</span><span class="o">;</span> <span class="n">z</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tempBt</span> <span class="o">=</span> <span class="n">enc</span><span class="o">(</span><span class="n">tempBt</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">[])</span> <span class="n">thirdKeyBt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">z</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java常见工具库培训]]></title>
    <link href="http://mccxj.github.com/blog/20141225_java-common-util.html"/>
    <updated>2014-12-25T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/java-common-util</id>
    <content type="html"><![CDATA[<p>目前项目中常见的工具库有apache commons,google guava,再算上spring的话，需要自己从头开始写工具类的情况大大减少。
为了给广大童鞋普及一下工具库用法，减少无用功(还可能因为实现的不好留后遗症的)，这里简单的介绍一下相关工具类。<strong>google guava大家应该比较陌生，这里先不介绍，:)</strong></p>

<h2>apache commons</h2>

<p>官方地址： http://commons.apache.org/</p>

<p>apache commons历史悠久，涉及范围也是最广的，在官网上分了数十个模块，但有些模块是新开发的，就不要贸然使用啦。</p>

<p>这里只是介绍最最常用的commons库，排名不分先后，如下：</p>

<h3>commons-codec</h3>

<p>包括常见的编码、解码算法，例如MD5,Base64，举例如下:</p>

<ul>
<li>Base64#encode 加密成base64串</li>
<li>Base64#decode 解密base64串</li>
<li>DigestUtils.md5Hex 进行MD5加密，注意得到的是小写的MD5(MD5标准不区分大小写),在比较的时候需要注意</li>
<li>DigestUtils.shaHex 进行SHA1加密 SHA256,512之类也是支持的，可以自行查阅</li>
</ul>


<h3>commons-collections</h3>

<p>包括一堆增强的集合类（我了解不多，大家可以自行学习），各种和集合类相关的工具类，举例如下：</p>

<ul>
<li>CollectionUtils.isEmpty 是否null或空集合，这一类的方法很多，看看有个大概印象</li>
<li>MapUtils.isEmpty 是否null或空Map</li>
<li>ListUtils.removeAll 从某个列表中删除存在于另外个列表的元素</li>
</ul>


<p>同类型的还有SetUtils、IteratorUtils等，大体上是集合相关的操作，如过滤、是否相等、交集、差集、转换(变同步、变不可变)等，其实这个用到的机会也不是很大。</p>

<h3>commons-net</h3>

<p>实现了一些常见的网络协议，可能关系最大的要数ftp、smtp的实现了。而jdk带的sun.net.ftp，这个尽量就少用拉。</p>

<p>这套api的实现用法得google一下了，看<a href="http://commons.apache.org/proper/commons-net/">官方文档的例子</a>,
又或者别人的经验代码，例如这个http://my.oschina.net/hly3825/blog/33657</p>

<h3>commons-httpclient</h3>

<p>http客户端实现，貌似已经从commons独立出去了。3.x版本和4.x版本变化比较大，大家要使用的时候自行查阅资料。
尽量避免使用HttpURLConnection去直接搞。</p>

<h3>commons-io</h3>

<p>io方面的工具类，主要包括文件处理、流处理,常见的类有IOUtils、FileUtils、FilenameUtils。举例如下：</p>

<ul>
<li>IOUtils.closeQuietly 安静关闭输出输出流，常用于finally关闭流的时候</li>
<li>IOUtils.copy 把某个输入流拷贝到某个输出流中去</li>
<li>IOUtils.toString 把某个输入流、URI的内容转换成字符串</li>
<li>IOUtils.readLines 按行读取流</li>
<li>Charset.UTF_8 有一些常见的、系统都会支持的字符集，已经定义成常量</li>
<li>FileUtils.readLines 按行读取文件</li>
<li>FileUtils.readFileToString 读取文件保存在一个字符串中</li>
</ul>


<p>IOUtils针对的是stream，FileUtils针对的是File对象，相应的有文件拷贝、删除等操作。<br/>
注意的是，<strong>使用字符流格式的时候，务必指定编码</strong></p>

<h3>commons-lang</h3>

<p>这个是使用最多的库了，有lang2.x和3.x版本，尽量使用3.x版本。</p>

<p>常见的有StringUtils、SystemUtils、RandomStringUtils、DateFormatUtils、DateUtils、各种Builder、Validate，举例如下：</p>

<ul>
<li>StringUitls.isEmpty 判空，和isBlank的区别在于它不进行trim</li>
<li>StringUtils.join 按分隔符合并，这个很常用</li>
<li>StringUtils.repeat 重复某个字符或字符串，有些需要格式化的是会用到</li>
<li>StringUtils.startsWith  和endsWith那样，是增强版本，还有endsWithAny、endsWithIgnoreCase等</li>
<li>SystemUtils 主要是一些常见系统环境变量，如临时目录、用户目录、分隔符等</li>
<li>RandomStringUtils 用来生成各种随即字符串，例如全字母、全数字或混合型的</li>
<li>DateFormatUtils、DateUtils 一个是字符串变日期，一个是日期相关的操作</li>
<li>各种Builder 主要用实现常见的toString、compareTo、equals、hashcode等常见类，例如ReflectionToStringBuilder就很方便实现toString方法。同理，CompareToBuilder、EqualsBuilder、HashCodeBuilder都很好理解。</li>
<li>Validate 实现一些assert，例如Validate.notNull可以用来做前置校验，和spring的Assert类是类似的。</li>
</ul>


<h3>其他commons库</h3>

<ul>
<li>commons-fileupload 仅限于在文件上传的类中使用，虽然它也有一些工具类，但是就不要在其他地方使用啦。</li>
<li>commons-dbcp 一个数据库连接池，现在就比较少用了</li>
<li>commons-pool 一个java对象池实现，通常用来缓存一些耗时较大的对象，dbcp也是基于它的，一般也少直接用。</li>
<li>commons-logging 日志包装实现，在开源项目中使用广泛，项目中一般直接用log4j等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用org.json库进行xml和json转换存在的问题]]></title>
    <link href="http://mccxj.github.com/blog/20141126_org-json-and-xml.html"/>
    <updated>2014-11-26T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/org-json-and-xml</id>
    <content type="html"><![CDATA[<p>org.json库中提供一个xml和json进行转换的工具类，XML.java</p>

<p>使用方式如下：
* xmlstr = XML.toString(jsonstr)
* jsonstr = XML.toJSONObject(xmlstr).toString()</p>

<p>中间层原有代码使用这种方式进行格式转换，不过存在一些问题：
* json转换为xml的时候，对带content字段的节点，是直接生成文本，而不是<content>xx</content>
* xml转换为json的时候，会对指为整形(还有true/false/null等)的字符串尝试进行转换，变成原生类型</p>

<p>为了避免这两个问题，对org.json库的XML.java进行了一些修改:
* 去掉content字段的特殊处理
* 去掉整形字符串尝试转换的逻辑</p>

<p>见https://github.com/mccxj/JSON-java</p>

<p>经验教训: 以后引用第三方库的时候，要小心呀，避免触碰到一些特殊开关。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结合状态机的开发风格]]></title>
    <link href="http://mccxj.github.com/blog/20140819_state-machine-dev.html"/>
    <updated>2014-08-19T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/state-machine-dev</id>
    <content type="html"><![CDATA[<p>本文主要以XXX的html5版本为蓝本，讨论结合状态机开发的思路和实践方式。状态机选型使用<a href="https://github.com/burrows/statechart.js">statechart.js</a>。</p>

<h3>起步知识</h3>

<ul>
<li>状态机介绍，请参考<a href="http://burrows.github.io/statechart-angular-pres">Statecharts and Angular.js</a></li>
<li>statechart.js的基本使用方法，请参考<a href="https://github.com/burrows/statechart.js">statechart.js</a></li>
</ul>


<p>特别是状态机介绍，内容非常好，强烈推荐。</p>

<h3>适用场景</h3>

<ul>
<li>主要用于某个具体业务的复杂页面流控制</li>
<li>简单的业务流程是不需要的。例如只有一两个页面(列表+详情)</li>
<li>适用于多步骤多页面(包括弹出框)、各种跳转的场景</li>
</ul>


<h3>如何定义状态?</h3>

<p>根据页面流、步骤来定义状态。可以参考以下步骤：</p>

<ul>
<li><p>对照保真、流程图，划分每个独立页面
以个人营销活动为例，主要页面包括活动页面、选档次页面、奖品页面、奖品包选择页面、缴费页面、发票页面。
那么可以考虑定义为list、level、reward、giftpack、charge、invoice</p></li>
<li><p>对于有多种弹出窗口的情况，可以考虑定义子状态
以推荐业务为例，在菜单页面上，可能会弹出反馈窗口，或者产品订购窗口。
那么可以考虑定义为menu/index、menu/feedback、menu/prod，这样的话，通过下面的页面控制，就可以让在值状态的情况下，菜单页面一直显示。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/menu&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/recommended/recommended_menu.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/menu/prod&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/recommended/recommended_orderprod.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/menu/feedback&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/recommended/recommended_feedback.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对于页面显示，有较多共性的页面，可以考虑定义子状态，方便共享逻辑和事件处理
以上述的个人营销活动为例，奖品页面、奖品包选择页面的页面很类似，功能操作也比较实现，可以定义成子状态，如order/reward、order/giftpack</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/list&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_list.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/level&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_level.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/order/reward&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_reward.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/order/giftpack&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_giftpack.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/invoice&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_invoice.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;fsm.isCurrent(&#39;/charge&#39;)&quot;</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;app/partials/personalMarketCamp/personalMarketCamp_charge.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何控制页面的显示、如何响应页面操作?</h3>

<ul>
<li>页面显示与否，通过状态机的状态，而不是数据的状态。这里用的是isCurrent方法</li>
<li>页面操作，通过状态机的事件发送，而不是直接使用绑定在$scope的方法。这里用的是send方法</li>
<li>页面跳转，通过状态机的状态变化来驱动。这里用的是goto方法，是在send方法之后的event逻辑中处理的。</li>
</ul>


<p>页面显示与否，例子上面已经说了。而对于ng-click这种事件触发，直接用send方法即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;Feedback-btn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;fsm.send(&#39;feedback&#39;, &#39;hesitate&#39;)&quot;</span> <span class="na">class=</span><span class="s">&quot;accept-btn&quot;</span><span class="nt">&gt;&lt;span&gt;</span>考虑<span class="nt">&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;fsm.send(&#39;feedback&#39;, &#39;refuse&#39;)&quot;</span> <span class="na">class=</span><span class="s">&quot;refuse-btn&quot;</span><span class="nt">&gt;&lt;span&gt;</span>拒绝<span class="nt">&lt;/span&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，事件也可以捎带参数的，这样可以在该状态的event中进行处理，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># 反馈</span>
</span><span class='line'><span class="nx">@state</span> <span class="s">&#39;feedback&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1"># 进行反馈操作</span>
</span><span class='line'>  <span class="nx">@event</span> <span class="s">&#39;feedback&#39;</span><span class="p">,</span> <span class="nf">(operationtype) -&gt;</span>
</span><span class='line'>    <span class="nv">product = </span><span class="nx">$scope</span><span class="p">.</span><span class="nx">viewModel</span><span class="p">.</span><span class="nx">product</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">product</span><span class="p">.</span><span class="nx">opertype</span> <span class="o">==</span> <span class="s">&#39;1&#39;</span>
</span><span class='line'>      <span class="k">new</span> <span class="nx">Toast</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">context: </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">message: </span><span class="s">&quot;该产品不可推荐&quot;</span>
</span><span class='line'>      <span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">qryfeedbackService</span><span class="p">.</span><span class="nx">event</span>
</span><span class='line'>      <span class="s">&quot;userseq&quot;</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">viewModel</span><span class="p">.</span><span class="nx">product</span><span class="p">.</span><span class="nx">userseq</span>
</span><span class='line'>      <span class="s">&quot;servnumber&quot;</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">telnum</span>
</span><span class='line'>      <span class="s">&quot;operationtype&quot;</span><span class="o">:</span> <span class="nx">operationtype</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span> <span class="nf">(ok) =&gt;</span>
</span><span class='line'>        <span class="nx">@goto</span> <span class="s">&#39;/menu/index&#39;</span>
</span><span class='line'>      <span class="p">,</span> <span class="nf">(err) -&gt;</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">Toast</span><span class="p">(</span>
</span><span class='line'>          <span class="nv">context: </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">message: </span><span class="nx">err</span>
</span><span class='line'>        <span class="p">).</span><span class="nx">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，event是挂靠在某个状态下的，如果你是子状态的话的，event会先在子状态中找，如果没有找到会在父状态上找。
通过这种方式，就可以实现多个子状态共享event，例如奖品页面、奖品包页面都有选择功能，就可以把这个操作放到父状态的event中去。</p>

<h3>更多状态机的细节</h3>

<p>很多状态机都实现了某些特殊状态，如进入状态，退出状态这种事件。statechart也实现了，对应的是enter和exit，代码大体上是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">@state</span> <span class="s">&#39;menu&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@enter</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1">#TODO</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@exit</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1">#TODO</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是需要注意的是，重复进入这个状态的话，是会重复执行的。所以对于A -> B -> C这样的业务流程，从A到B和C回退到B，都会执行这个enter，
就无法区分这种情况了。因为通常，从A到B是进行初始化，而从C回到B得保留原来B的数据状态。所以实际上我很少使用这些特殊事件，除非：</p>

<ul>
<li>无需区分的情况，这样写会让代码风格更统一。</li>
<li>没有接口交互，本地操作的话，因为这种消耗小很多。</li>
<li>存在直接跳转到该状态的情况(例如由另外的业务跳转过来)，这种特殊情况下前面的步骤都被忽略。而且这种情况下，需要通常需要接口交互(例如补充某些必要信息)，而为了区分回退的情况，我通常会根据业务特性考虑一些数据缓存处理。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[json格式须知]]></title>
    <link href="http://mccxj.github.com/blog/20140815_json-intro.html"/>
    <updated>2014-08-15T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/json-intro</id>
    <content type="html"><![CDATA[<p>着重介绍与项目使用相关的json知识。如果没有特别说明，环境是指Javascript下的json。</p>

<h3>区分类型</h3>

<ul>
<li>首先需要区分json字符串和json对象，不过通常根据上下文可以区分。</li>
<li>协议关注的是json字符串，而代码中处理的是json对象，两者通过序列化(JSON.stringify)和反序列化相互转换(JSON.parse)。</li>
</ul>


<h3>常见格式</h3>

<ul>
<li>主要有数组和key/value形式的object</li>
<li>数组是有顺序的，可以不同类型，常用于顺序遍历操作。</li>
<li>object是无顺序的，key只能是字符串，常用于快速随机查找。</li>
<li>null是可以被序列化的，而undefined不可以(会消失)。</li>
<li>其他的一些特殊值，如Nan，Infinity，会被序列化为null。</li>
</ul>


<h3>关于数组</h3>

<ul>
<li>对于数组对象，虽然支持key/value的操作，但是序列化的时候设置的值会丢失。</li>
<li>数组序列化的长度是根据length属性来的，没有赋值的位置是null。</li>
<li>对数组遍历不应该采用for in语句，因为通过key/value设置的值也会被输出。</li>
</ul>


<h3>关于Object</h3>

<ul>
<li>规范上规定key是带双引号的字符串()，但实际上很多反序列化工具能够支持数值、单引号字符串、字符串字面量(没有引号的字符串)。</li>
<li>如果是一普通浮点数值，可以通过相应的数值作为key获取，或者通过对应的字符串来获取。如用2.2的话，可以用2.2或&#8221;2.2&#8221;。</li>
<li>如果是一整型数值，可以用数值，但用字符串只能用整型的，如用2.0的话，可以用2.0或2或&#8221;2&#8221;,但&#8221;2.0&#8221;就不可以。</li>
<li>如果使用字符串字面量的话，需要避免一些关键字使用。如delete</li>
<li>key不应该重复，如果重复的话，通常结果是后面的会覆盖前面的。</li>
<li>可以用.后面加key来取值，或者用[]这样的操作符来获取，第一种方式更推荐，但只能支持非数字开头的字符串，unicode也是可以。</li>
<li>对object遍历可以采用for in语句。</li>
</ul>


<h3>协议转换</h3>

<ul>
<li>协议传输的是json字符串，但通常里边的类型都是字符串，不区分数值，因此做数值运算需要先转换。</li>
<li>和xml一样，需要注意特殊字符如引号、回车、unicode等，尽量避免手动拼接，采用序列化工具。</li>
<li>object类型的json序列化/序列化的时候，都不应该预期他是有顺序的，虽然很多库都有带默认顺序，应该使用数组。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angular开发总结]]></title>
    <link href="http://mccxj.github.com/blog/20140815_angular-dev.html"/>
    <updated>2014-08-15T00:00:00+08:00</updated>
    <id>http://mccxj.github.com/blog/angular-dev</id>
    <content type="html"><![CDATA[<p>下面是XXX的HTML5版本开发总结。</p>

<h3>开发思路</h3>

<p>说好是MVVM了，当然和以前也页面为中心进行DOM操作的方式很不一样。这方面可以参考文章：<a href="http://www.infoq.com/cn/news/2013/11/how-to-think-angularjs">StackOverFlow精彩问答赏析：有jQuery背景的开发者如何建立起AngularJS的思维模式？</a></p>

<p>开发经验就是，以数据为中心来考虑。我通常是对着高保真，先把所需要的数据结构先构思了，看看接口是如何和数据进行对接的。</p>

<p>不过，即使是以数据为中心的开发模式，逻辑与视图的完全分开几乎是不可能完成的任务，只能尽量的分离。我们需要操作的数据模型，不是真正意义的业务模型，而是视图模型(业务数据和视图数据的混合体)。如果实现上需要更偏重业务模型的话，可能要更多借助于resource的概念(ng也有提供这个)，不过对于我们这种过程化的接口，意义不大。</p>

<h3>关于Service</h3>

<p>因为接口的原因，现在有的Service文件，按规范是一个接口对应一个，而且文件内容除了接口参数和响应结果获取，其他基本上是一样的。</p>

<p>根据接口数据的格式，我有时候会预先在service里边进行格式调整，例如一个带父子关系的列表数据，需要先整理为两层的数据结构，这个我会优先考虑在Service里处理。基本原则就是，如何让数据更贴近业务模型。</p>

<h3>关于Controller</h3>

<p>因为Service是一个很薄的一层，所以大多的页面流程控制，都是在Controller里边完成的。对于Controller如何组织视图模型，我通常是定义一个总的viewModel，来挂载所有的视图模型，大体上就是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># 定义视图的数据模型</span>
</span><span class='line'><span class="nv">$scope.viewModel =</span>
</span><span class='line'>  <span class="nv">acttypes: </span><span class="kc">null</span> <span class="c1">#活动类型</span>
</span><span class='line'>  <span class="nv">acts: </span><span class="p">{}</span> <span class="c1">#可选的活动列表数据</span>
</span><span class='line'>  <span class="nv">act: </span><span class="kc">null</span> <span class="c1">#选择的活动</span>
</span><span class='line'>  <span class="nv">levels: </span><span class="p">[]</span> <span class="c1">#可选的档次</span>
</span><span class='line'>  <span class="nv">level: </span><span class="kc">null</span> <span class="c1">#选择的档次</span>
</span><span class='line'>  <span class="nv">rewards: </span><span class="p">[]</span> <span class="c1">#可选的赠品、赠品包</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个做法，有个最明显的好处，就是不容易踩到ng-model的scope的坑，关于angular的scope,请参考文章 <a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes">Understanding Scopes </a></p>

<h3>关于ngmodel</h3>

<p>像上面提到的，使用ngmodel,nginit这种会操作model的指令，需要注意scope的范围，一不小心就可能操作到不同的scope。具体原因请参考上述文章。有几个办法可以处理：
* 使用$parent,但是对于多层次的scope无效。
* 采用非原型类型的obj，可以避免scope的意外。如上述的viewModel</p>

<p>大多数情况在我们都是用的单向绑定，如果涉及ng-model这种双向绑定的话，有另外一个文章推荐 <a href="http://www.chroder.com/2014/02/01/using-ngmodelcontroller-with-custom-directives/">Using NgModelController With Custom Directives</a>, 因为这篇文章很好的描述了angular对双向绑定的处理流程。</p>

<p>另外，如果使用html5的验证或新类型，也会有些问题，例如你使用number类型，输入非number类型的内容的话，model获取到的值就无效了。</p>

<h3>关于性能</h3>

<p>可以参考一下这位UC童鞋的文章 <a href="http://atian25.github.io/2014/05/09/angular-performace/">angular性能优化心得</a></p>

<p>基本上该说的都在上面的了。这里补充一下：</p>

<ul>
<li>bindonce可以减少一些无谓的watch，主要用于ng-repeat上，目前还没使用上，但试过是可用的。</li>
<li>在watch方法里边不能操作dom，并及时unwatch。操作dom对性能影响很大。</li>
<li>像$interval，$timeout虽然有个invokeApply这个参数，却是无效的，这个问题在1.3.0beta14才修复，如果不需要变更模型，建议用原生的。</li>
<li>filter因为经常计算，所以要尽量的快，选择合适的数据结构很重要，例如对大列表进行筛选不如key/value的查找快。曾经做过字典结构的调整。</li>
<li>目前项目没有lazy loading的问题，这迟早是需要考虑的，网上已有一些方案，借助了route的resolve特性来实现的。</li>
</ul>


<h3>复杂页面流程</h3>

<ul>
<li>是分单个route还是多个route，主要考虑是否需要独立入口，因为一个route对应一个url。这个主要参考URL的设计原则。</li>
<li>跨页面参数传递，如果参数少建议用路径参数，如果共享数据多，可以使用服务来数据共享。</li>
</ul>


<p>复杂页面的处理，我主要考虑使用状态机来处理。现在使用<a href="https://github.com/burrows/statechart.js">statechart.js</a></p>

<p>关于状态机的介绍，请参考<a href="http://burrows.github.io/statechart-angular-pres">Statecharts and Angular.js</a></p>

<h3>开发工具支持</h3>

<p>项目涉及多种工具、概念，需要掌握他们的应用场景：</p>

<ul>
<li>基础设施 node</li>
<li>包管理 npm</li>
<li>模块化，require，sea,amd,cmd</li>
<li>资源依赖，bower</li>
<li>打包自动化，grunt</li>
<li>angular相关 插件batarang</li>
<li>语言改进，coffeescript</li>
</ul>


<p>特别说明关于coffeescript的使用，上述关于viewModel的代码就是coffeescript，大体上可以减少1/3的代码行。</p>

<h3>调试的支持</h3>

<p>chrome的调试工具很强大，能够模拟手机操作，基本可以解决大多数问题。</p>

<p>不过真机、webview之类的调试仍然是个大问题。当然方案也是有的，如google官方的android+chrome方案、weinre的方案。
不过，我页面做的少，实在没什么经验可以发表的。</p>

<h3>其他</h3>

<p>自己对css并不熟悉，主要关注逻辑编写，个人认为和web打交道，还是得多理解http协议，浏览器原理。</p>
]]></content>
  </entry>
  
</feed>
